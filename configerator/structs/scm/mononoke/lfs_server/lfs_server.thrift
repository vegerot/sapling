// @generated SignedSource<<cd5d68b40f35f1f3e5469d427f5c1f8d>>
// DO NOT EDIT THIS FILE MANUALLY!
// This file is a mechanical copy of the version in the configerator repo. To
// modify it, edit the copy in the configerator repo instead and copy it over by
// running the following in your fbcode directory:
//
// configerator-thrift-updater scm/mononoke/lfs_server/lfs_server.thrift
include "thrift/annotation/rust.thrift"
include "configerator/structs/scm/mononoke/ratelimiting/ratelimits.thrift"

@rust.Exhaustive
struct ObjectPopularity {
  // The SCS category used to record object popularity.
  1: string category;
  // The window (in seconds) over which an object's popularity is calculated.
  2: i32 window;

  // 3: deleted

  // If more than <threshold> bytes of an object have been served in <window>
  // time, then it is considered as popular and starts to be distributed across
  // tasks_per_content. If blob is very popular the consistent routing is turned off
  // and blob is routed to all tasks.
  //
  // Threshold values and tasks_per_content need to be in an ascending order in
  // the list.
  //
  // ConsistentRoutingRingModeAll can only be at the end of the list.
  //
  4: list<ConsistentRoutingRing> thresholds;
}

@rust.Exhaustive
struct ConsistentRoutingRing {
  1: i64 threshold;
  2: ConsistentRoutingRingMode mode;
}

union ConsistentRoutingRingMode {
  1: ConsistentRoutingRingModeNum num;
  2: ConsistentRoutingRingModeAll all;
}

@rust.Exhaustive
struct ConsistentRoutingRingModeAll {}
@rust.Exhaustive
struct ConsistentRoutingRingModeNum {
  1: i16 tasks_per_content;
}

@rust.Exhaustive
struct LfsServerConfig {
  // Whether or not to increment counters when sending bytes as opposed to when
  // accepting an upload.
  1: bool track_bytes_sent;

  // Whether or not to emit ?routing=SHA256 query strings when respond to a
  // batch request.
  2: bool enable_consistent_routing;

  // Don't use 3 and 4: these were used in the past.

  // 5: deleted

  // 6: deleted

  // Whether to enforce ACL checks.
  7: bool enforce_acl_check;

  // Whether to skip client hostname resolution and logging.
  8: bool disable_hostname_logging;

  // 9: deleted

  // 10: deleted

  11: optional ObjectPopularity object_popularity;

  // 12: deleted

  // Disable compression of blob downloads for all clients
  13: bool disable_compression;

  // Disable compression of blob downloads for clients with the specified
  // identities. The client's identities are compared to each of the identity
  // lists specified. If one of the identity lists is a subset of the client's
  // identity then compression will be disabled.
  14: list<list<string>> disable_compression_identities;

  // Whether to enforce certificate presence.
  15: bool enforce_authentication;

  // Load shedding config
  16: list<ratelimits.LoadShedLimit> loadshedding_limits;
}
