load("@fbcode_macros//build_defs:native_rules.bzl", "buck_command_alias", "buck_filegroup")
load("@fbcode_macros//build_defs:python_binary.bzl", "python_binary")
load("@fbcode_macros//build_defs:python_unittest.bzl", "python_unittest")
load("//eden:defs.bzl", "get_integration_test_env_and_deps")
load("//eden/scm/tests:targets.bzl", "get_blocklist", "get_hg_edenfs_watchman_run_tests_included", "get_hg_run_tests_excluded", "get_hg_watchman_run_tests_excluded")

oncall("sapling")

SRCS = dict(
    [("unittestify.py", "unittestify.py")],
)

OTHER_FILES = [
    "unittestify.py",
    "TARGETS",
]

RUN_TEST_PY_FILES = [
    "run-tests.py",
    "features.py",
    "watchman.py",
    "killdaemons.py",
    "default_hgrc.py",
]

TEST_FILES = [f for f in glob(["**/*"]) if f not in RUN_TEST_PY_FILES and f not in OTHER_FILES]

buck_filegroup(
    name = "test_files",
    srcs = TEST_FILES,
)

python_binary(
    name = "run_tests_py",
    srcs = RUN_TEST_PY_FILES,
    main_function = "eden.scm.tests.run-tests.main",
    # The line below is necessary as we have some extensions (e.g., autodiff.py) in the tests directory
    # which include modules like sapling.*, and that makes the linter confused about it
    tags = ["noautodeps"],
)

python_binary(
    name = "run_tests_py_eden",
    srcs = RUN_TEST_PY_FILES + ["edenfs.py"],
    main_function = "eden.scm.tests.run-tests.main",
    # The line below is necessary as we have some extensions (e.g., autodiff.py) in the tests directory
    # which include modules like sapling.*, and that makes the linter confused about it
    tags = ["noautodeps"],
    deps = [
        "//eden/integration/lib:lib",
    ],
)

# @unsorted-dict-items
ENV = {
    # PYTHONPATH messed up:
    #  - extension
    #  - extension_foreign_module
    #  - hook
    #  - merge_tools
    #  - commandserver
    "HGTEST_EXCLUDED": get_hg_run_tests_excluded(),
    "HGTEST_BLOCKLIST": get_blocklist(),
    # used by unittestify.py
    "HGTEST_DIR": "eden/scm/tests",
    # The one below determines the location of all misc. files required by run-tests.py but not directly
    # imported by it. This is especially important when running in opt mode.
    "RUNTESTDIR": "$(location :test_files)",
    "HGTEST_DUMMYSSH": "$(location :dummyssh3)",
    "HGTEST_GETDB_SH": "$(location //eden/scm/fb/tests:getdb_sh)",
    "HGTEST_HG": "$(location //eden/scm:hg)",
    "HGEXECUTABLEPATH": "$(location //eden/scm:hg)",
    "URLENCODE": "$(location //eden/mononoke/tests/integration:urlencode)",
    "HGTEST_NORMAL_LAYOUT": "0",
    "HGRUNTEST_SKIP_ENV": "1",
    "HGTEST_PYTHON": "fbpython",
    "HGTEST_RUN_TESTS_PY": "$(location :run_tests_py)",
    "HGTEST_SLOWTIMEOUT": "2147483647",
    # used by run-tests.py
    # buck test has its own timeout so just disable run-tests.py
    # timeout practically.
    "HGTEST_TIMEOUT": "2147483647",
    "HGTEST_CERTDIR": "$(location //eden/mononoke/tests/integration/certs/facebook:test_certs)",
}

python_unittest(
    name = "hg_run_tests",
    srcs = SRCS,
    # non-python deps should be in cpp_deps (even if not cpp)
    cpp_deps = [
        "//eden/scm:scm_prompt",
    ],
    env = ENV,
    resources = {
        "//eden/scm/tests:dummyssh3": "dummyssh3.par",
        "//eden/scm:hg": "hg.sh",
        "//eden/scm:hgpython": "hgpython.sh",
    },
    supports_static_listing = False,
    runtime_deps = [
        "//eden/mononoke/tests/integration/certs/facebook:test_certs",
    ],
    deps = [
        "//libfb/py:parutil",
    ],
)

W_ENV = dict(ENV)

W_ENV["HGTEST_EXCLUDED"] = get_hg_watchman_run_tests_excluded()

W_ENV["HGTEST_BLOCKLIST"] = get_blocklist()

W_ENV["HGTEST_WATCHMAN"] = "$(location //watchman:watchman)"

python_unittest(
    name = "hg_watchman_run_tests",
    srcs = SRCS,
    env = W_ENV,
    resources = {
        "//eden/scm/tests:dummyssh3": "dummyssh3.par",
        "//eden/scm:hg": "hg.sh",
        "//eden/scm:hgpython": "hgpython.sh",
        "//watchman:watchman": "watchman",
    },
    supports_static_listing = False,
    deps = [
        "//libfb/py:parutil",
    ],
)

artifacts = get_integration_test_env_and_deps()

E_ENV = artifacts["env"]

E_ENV.update(ENV)

E_ENV["HGTEST_RUN_TESTS_PY"] = "$(location :run_tests_py_eden)"

E_ENV["HGTEST_USE_EDEN"] = "1"

python_unittest(
    name = "hg_edenfs_run_tests",
    srcs = SRCS,
    env = E_ENV,
    resources = {
        "//eden/scm/tests:dummyssh3": "dummyssh3.par",
        "//eden/scm:hg": "hg.sh",
        "//eden/scm:hgpython": "hgpython.sh",
    },
    supports_static_listing = False,
    runtime_deps = artifacts["deps"],
    deps = [
        "//libfb/py:parutil",
    ],
)

# Order is important, we want HGTEST_RUN_TESTS_PY from the Eden env var dict
EW_ENV = dict(W_ENV)

EW_ENV.update(E_ENV)

EW_ENV["HGTEST_INCLUDED"] = get_hg_edenfs_watchman_run_tests_included()

python_unittest(
    name = "hg_edenfs_watchman_run_tests",
    srcs = SRCS,
    env = EW_ENV,
    resources = {
        "//eden/scm/tests:dummyssh3": "dummyssh3.par",
        "//eden/scm:hg": "hg.sh",
        "//eden/scm:hgpython": "hgpython.sh",
        "//watchman:watchman": "watchman",
    },
    supports_static_listing = False,
    runtime_deps = artifacts["deps"],
    deps = [
        "//libfb/py:parutil",
    ],
)

buck_command_alias(
    name = "run_tests_py_eden_cli",
    env = E_ENV,
    exe = ":run_tests_py_eden",
)

M_ENV = dict(ENV)

M_ENV["USE_MONONOKE"] = "1"

M_ENV["HGTEST_MONONOKE_SERVER"] = "$(location //eden/mononoke:mononoke)"

M_ENV["HGTEST_GET_FREE_SOCKET"] = "$(location //eden/mononoke/tests/integration:get_free_socket)"

M_ENV["HGTEST_CERTDIR"] = "$(location //eden/mononoke/tests/integration/certs/facebook:test_certs)"

M_ENV.pop("HGTEST_EXCLUDED")

M_ENV.pop("HGTEST_BLOCKLIST")

M_ENV["DEBUGRUNTEST_DEFAULT_DISABLED"] = "1"

M_ENV["HGTEST_INCLUDED"] = "test_(fb_ext_remotefilelog_(log|getpackv2|worker|rust_lfs|ruststores_lfs_duplicated)|edenapi.*)_t"

M_ENV["TEST_FIXTURES"] = "$(location //eden/mononoke/tests/integration:test_fixtures)"

M_ENV["JUST_KNOBS_DEFAULTS"] = "$(location //eden/mononoke/mononoke_macros:just_knobs_defaults)"

M_ENV["FB_TEST_FIXTURES"] = "$(location //eden/mononoke/tests/integration/facebook:facebook_test_fixtures)"

python_unittest(
    name = "hg_mononoke_run_tests",
    srcs = SRCS,
    compatible_with = [
        "ovr_config//os:linux",
    ],
    env = M_ENV,
    resources = {
        "//eden/mononoke/tests/integration/certs/facebook:test_certs": "certs",
        "//eden/mononoke/tests/integration:get_free_socket": "get_free_socket.par",
        "//eden/mononoke:mononoke": "mononoke",
        "//eden/scm/tests:dummyssh3": "dummyssh3.par",
        "//eden/scm:hg": "hg.sh",
        "//eden/scm:hgpython": "hgpython.sh",
        "//watchman:watchman": "watchman",
    },
    supports_static_listing = False,
    runtime_deps = [
        "//eden/mononoke/tests/integration/certs/facebook:test_certs",
        "//eden/mononoke/tests/integration:test_fixtures",
    ],
    deps = ["//libfb/py:parutil"],
)

buck_filegroup(
    name = "test_runner",
    srcs = [
        "default_hgrc.py",
        "dummyssh",
        "heredoctest.py",
        "hghave",
        "hghave.py",
        "hgsql/library.sh",
        "hgsql/schema.innodb.sql",
        "hgsql/schema.rocksdb.sql",
        "infinitepush/library.sh",
        "killdaemons.py",
        "run-tests.py",
        "setconfig.py",
        "tinit.sh",
        "watchman.py",
    ],
)

python_binary(
    name = "dummyssh3",
    srcs = ["dummyssh3.py"],
    main_module = "eden.scm.tests.dummyssh3",
)
