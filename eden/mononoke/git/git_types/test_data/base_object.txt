% DO NOT EDIT: this file was @generated by thrift-erlang - Thrift IDL compiler for Erlang

-module(thrift_crypto_v2_if_crypto_v2_manager).

-compile(warn_missing_spec).
-export([
    default_crypto_v2_manager_create_project_request_v2/0,
    default_crypto_v2_manager_create_project_response_v2/0,
    default_crypto_v2_manager_crypto_v2_manager_service_create_project_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_create_project_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_get_project_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_get_project_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_result/0,
    default_crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_args/0,
    default_crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_result/0,
    default_crypto_v2_manager_delete_old_key_request_v2/0,
    default_crypto_v2_manager_delete_old_key_response_v2/0,
    default_crypto_v2_manager_get_all_projects_response_v2/0,
    default_crypto_v2_manager_get_project_request_v2/0,
    default_crypto_v2_manager_get_project_response_v2/0,
    default_crypto_v2_manager_key_algorithm_options/0,
    default_crypto_v2_manager_multi_get_projects_request_v2/0,
    default_crypto_v2_manager_multi_get_projects_response_element_v2/0,
    default_crypto_v2_manager_multi_get_projects_response_v2/0,
    default_crypto_v2_manager_purge_project_request_v2/0,
    default_crypto_v2_manager_purge_project_response_v2/0,
    default_crypto_v2_manager_rewrap_keys_request_v2/0,
    default_crypto_v2_manager_rewrap_keys_response_v2/0,
    default_crypto_v2_manager_rotate_keys_request_v2/0,
    default_crypto_v2_manager_rotate_keys_response_v2/0,
    default_crypto_v2_manager_set_next_key_request_v2/0,
    default_crypto_v2_manager_set_next_key_response_v2/0,
    default_crypto_v2_manager_soft_delete_project_request_v2/0,
    default_crypto_v2_manager_soft_delete_project_response_v2/0,
    default_crypto_v2_manager_undelete_project_request_v2/0,
    default_crypto_v2_manager_undelete_project_response_v2/0,
    default_crypto_v2_manager_update_project_metadata_request_v2/0,
    default_crypto_v2_manager_update_project_metadata_response_v2/0,
    gen_create_project_request_v2/1,
    gen_create_project_response_v2/1,
    gen_crypto_v2_manager_service_create_project_v2_args/1,
    gen_crypto_v2_manager_service_create_project_v2_result/1,
    gen_crypto_v2_manager_service_delete_old_key_v2_args/1,
    gen_crypto_v2_manager_service_delete_old_key_v2_result/1,
    gen_crypto_v2_manager_service_get_all_projects_v2_args/1,
    gen_crypto_v2_manager_service_get_all_projects_v2_result/1,
    gen_crypto_v2_manager_service_get_project_v2_args/1,
    gen_crypto_v2_manager_service_get_project_v2_result/1,
    gen_crypto_v2_manager_service_multi_get_projects_v2_args/1,
    gen_crypto_v2_manager_service_multi_get_projects_v2_result/1,
    gen_crypto_v2_manager_service_purge_project_v2_args/1,
    gen_crypto_v2_manager_service_purge_project_v2_result/1,
    gen_crypto_v2_manager_service_rewrap_keys_v2_args/1,
    gen_crypto_v2_manager_service_rewrap_keys_v2_result/1,
    gen_crypto_v2_manager_service_rotate_keys_v2_args/1,
    gen_crypto_v2_manager_service_rotate_keys_v2_result/1,
    gen_crypto_v2_manager_service_set_next_key_v2_args/1,
    gen_crypto_v2_manager_service_set_next_key_v2_result/1,
    gen_crypto_v2_manager_service_soft_delete_project_v2_args/1,
    gen_crypto_v2_manager_service_soft_delete_project_v2_result/1,
    gen_crypto_v2_manager_service_undelete_project_v2_args/1,
    gen_crypto_v2_manager_service_undelete_project_v2_result/1,
    gen_crypto_v2_manager_service_update_project_metadata_v2_args/1,
    gen_crypto_v2_manager_service_update_project_metadata_v2_result/1,
    gen_delete_old_key_request_v2/1,
    gen_delete_old_key_response_v2/1,
    gen_get_all_projects_response_v2/1,
    gen_get_project_request_v2/1,
    gen_get_project_response_or_error_v2/1,
    gen_get_project_response_v2/1,
    gen_key_algorithm_options/1,
    gen_multi_get_projects_request_v2/1,
    gen_multi_get_projects_response_element_v2/1,
    gen_multi_get_projects_response_v2/1,
    gen_purge_project_request_v2/1,
    gen_purge_project_response_v2/1,
    gen_rewrap_keys_request_v2/1,
    gen_rewrap_keys_response_v2/1,
    gen_rotate_keys_request_v2/1,
    gen_rotate_keys_response_v2/1,
    gen_rpc_record/1,
    gen_set_next_key_request_v2/1,
    gen_set_next_key_response_v2/1,
    gen_soft_delete_project_request_v2/1,
    gen_soft_delete_project_response_v2/1,
    gen_tget_project_request_mode/1,
    gen_undelete_project_request_v2/1,
    gen_undelete_project_response_v2/1,
    gen_update_project_metadata_request_v2/1,
    gen_update_project_metadata_response_v2/1,
    get_rpc_generators/2,
    get_rpc_parsers/2,
    inspect/0,
    inspect/1,
    parse_create_project_request_v2/1,
    parse_create_project_response_v2/1,
    parse_crypto_v2_manager_service_create_project_v2_args/1,
    parse_crypto_v2_manager_service_create_project_v2_result/1,
    parse_crypto_v2_manager_service_delete_old_key_v2_args/1,
    parse_crypto_v2_manager_service_delete_old_key_v2_result/1,
    parse_crypto_v2_manager_service_get_all_projects_v2_args/1,
    parse_crypto_v2_manager_service_get_all_projects_v2_result/1,
    parse_crypto_v2_manager_service_get_project_v2_args/1,
    parse_crypto_v2_manager_service_get_project_v2_result/1,
    parse_crypto_v2_manager_service_multi_get_projects_v2_args/1,
    parse_crypto_v2_manager_service_multi_get_projects_v2_result/1,
    parse_crypto_v2_manager_service_purge_project_v2_args/1,
    parse_crypto_v2_manager_service_purge_project_v2_result/1,
    parse_crypto_v2_manager_service_rewrap_keys_v2_args/1,
    parse_crypto_v2_manager_service_rewrap_keys_v2_result/1,
    parse_crypto_v2_manager_service_rotate_keys_v2_args/1,
    parse_crypto_v2_manager_service_rotate_keys_v2_result/1,
    parse_crypto_v2_manager_service_set_next_key_v2_args/1,
    parse_crypto_v2_manager_service_set_next_key_v2_result/1,
    parse_crypto_v2_manager_service_soft_delete_project_v2_args/1,
    parse_crypto_v2_manager_service_soft_delete_project_v2_result/1,
    parse_crypto_v2_manager_service_undelete_project_v2_args/1,
    parse_crypto_v2_manager_service_undelete_project_v2_result/1,
    parse_crypto_v2_manager_service_update_project_metadata_v2_args/1,
    parse_crypto_v2_manager_service_update_project_metadata_v2_result/1,
    parse_delete_old_key_request_v2/1,
    parse_delete_old_key_response_v2/1,
    parse_get_all_projects_response_v2/1,
    parse_get_project_request_v2/1,
    parse_get_project_response_or_error_v2/1,
    parse_get_project_response_v2/1,
    parse_key_algorithm_options/1,
    parse_multi_get_projects_request_v2/1,
    parse_multi_get_projects_response_element_v2/1,
    parse_multi_get_projects_response_v2/1,
    parse_purge_project_request_v2/1,
    parse_purge_project_response_v2/1,
    parse_rewrap_keys_request_v2/1,
    parse_rewrap_keys_response_v2/1,
    parse_rotate_keys_request_v2/1,
    parse_rotate_keys_response_v2/1,
    parse_rpc_record/1,
    parse_set_next_key_request_v2/1,
    parse_set_next_key_response_v2/1,
    parse_soft_delete_project_request_v2/1,
    parse_soft_delete_project_response_v2/1,
    parse_tget_project_request_mode/1,
    parse_undelete_project_request_v2/1,
    parse_undelete_project_response_v2/1,
    parse_update_project_metadata_request_v2/1,
    parse_update_project_metadata_response_v2/1,
    record_info_/2,
    spec_create_project_request_v2/0,
    spec_create_project_response_v2/0,
    spec_delete_old_key_request_v2/0,
    spec_delete_old_key_response_v2/0,
    spec_get_all_projects_response_v2/0,
    spec_get_project_request_v2/0,
    spec_get_project_response_or_error_v2/0,
    spec_get_project_response_v2/0,
    spec_key_algorithm_options/0,
    spec_multi_get_projects_request_v2/0,
    spec_multi_get_projects_response_element_v2/0,
    spec_multi_get_projects_response_v2/0,
    spec_purge_project_request_v2/0,
    spec_purge_project_response_v2/0,
    spec_rewrap_keys_request_v2/0,
    spec_rewrap_keys_response_v2/0,
    spec_rotate_keys_request_v2/0,
    spec_rotate_keys_response_v2/0,
    spec_set_next_key_request_v2/0,
    spec_set_next_key_response_v2/0,
    spec_soft_delete_project_request_v2/0,
    spec_soft_delete_project_response_v2/0,
    spec_tget_project_request_mode/0,
    spec_undelete_project_request_v2/0,
    spec_undelete_project_response_v2/0,
    spec_update_project_metadata_request_v2/0,
    spec_update_project_metadata_response_v2/0,
    tget_project_request_mode_atom_to_integer/1,
    tget_project_request_mode_integer_to_atom/1,
    value_parse_create_project_request_v2/1,
    value_parse_create_project_response_v2/1,
    value_parse_crypto_v2_manager_service_create_project_v2_args/1,
    value_parse_crypto_v2_manager_service_create_project_v2_result/1,
    value_parse_crypto_v2_manager_service_delete_old_key_v2_args/1,
    value_parse_crypto_v2_manager_service_delete_old_key_v2_result/1,
    value_parse_crypto_v2_manager_service_get_all_projects_v2_args/1,
    value_parse_crypto_v2_manager_service_get_all_projects_v2_result/1,
    value_parse_crypto_v2_manager_service_get_project_v2_args/1,
    value_parse_crypto_v2_manager_service_get_project_v2_result/1,
    value_parse_crypto_v2_manager_service_multi_get_projects_v2_args/1,
    value_parse_crypto_v2_manager_service_multi_get_projects_v2_result/1,
    value_parse_crypto_v2_manager_service_purge_project_v2_args/1,
    value_parse_crypto_v2_manager_service_purge_project_v2_result/1,
    value_parse_crypto_v2_manager_service_rewrap_keys_v2_args/1,
    value_parse_crypto_v2_manager_service_rewrap_keys_v2_result/1,
    value_parse_crypto_v2_manager_service_rotate_keys_v2_args/1,
    value_parse_crypto_v2_manager_service_rotate_keys_v2_result/1,
    value_parse_crypto_v2_manager_service_set_next_key_v2_args/1,
    value_parse_crypto_v2_manager_service_set_next_key_v2_result/1,
    value_parse_crypto_v2_manager_service_soft_delete_project_v2_args/1,
    value_parse_crypto_v2_manager_service_soft_delete_project_v2_result/1,
    value_parse_crypto_v2_manager_service_undelete_project_v2_args/1,
    value_parse_crypto_v2_manager_service_undelete_project_v2_result/1,
    value_parse_crypto_v2_manager_service_update_project_metadata_v2_args/1,
    value_parse_crypto_v2_manager_service_update_project_metadata_v2_result/1,
    value_parse_delete_old_key_request_v2/1,
    value_parse_delete_old_key_response_v2/1,
    value_parse_get_all_projects_response_v2/1,
    value_parse_get_project_request_v2/1,
    value_parse_get_project_response_or_error_v2/1,
    value_parse_get_project_response_v2/1,
    value_parse_key_algorithm_options/1,
    value_parse_multi_get_projects_request_v2/1,
    value_parse_multi_get_projects_response_element_v2/1,
    value_parse_multi_get_projects_response_v2/1,
    value_parse_purge_project_request_v2/1,
    value_parse_purge_project_response_v2/1,
    value_parse_rewrap_keys_request_v2/1,
    value_parse_rewrap_keys_response_v2/1,
    value_parse_rotate_keys_request_v2/1,
    value_parse_rotate_keys_response_v2/1,
    value_parse_set_next_key_request_v2/1,
    value_parse_set_next_key_response_v2/1,
    value_parse_soft_delete_project_request_v2/1,
    value_parse_soft_delete_project_response_v2/1,
    value_parse_tget_project_request_mode/1,
    value_parse_undelete_project_request_v2/1,
    value_parse_undelete_project_response_v2/1,
    value_parse_update_project_metadata_request_v2/1,
    value_parse_update_project_metadata_response_v2/1
]).
-compile({inline, [
    spec_get_project_request_v2/0,
    spec_get_project_response_or_error_v2/0,
    spec_get_project_response_v2/0,
    spec_key_algorithm_options/0,
    spec_multi_get_projects_response_element_v2/0,
    spec_tget_project_request_mode/0
]}).
-export_type([
    create_project_request_v2/0,
    create_project_response_v2/0,
    tget_project_request_mode_constants/0,
    tget_project_request_mode/0,
    get_project_request_v2/0,
    get_project_response_v2/0,
    update_project_metadata_request_v2/0,
    update_project_metadata_response_v2/0,
    rewrap_keys_request_v2/0,
    rewrap_keys_response_v2/0,
    rotate_keys_request_v2/0,
    rotate_keys_response_v2/0,
    key_algorithm_options/0,
    set_next_key_request_v2/0,
    set_next_key_response_v2/0,
    soft_delete_project_request_v2/0,
    soft_delete_project_response_v2/0,
    undelete_project_request_v2/0,
    undelete_project_response_v2/0,
    purge_project_request_v2/0,
    purge_project_response_v2/0,
    multi_get_projects_request_v2/0,
    get_project_response_or_error_v2/0,
    multi_get_projects_response_element_v2/0,
    multi_get_projects_response_v2/0,
    get_all_projects_response_v2/0,
    delete_old_key_request_v2/0,
    delete_old_key_response_v2/0,
    crypto_v2_manager_service_create_project_v2_args/0,
    crypto_v2_manager_service_get_project_v2_args/0,
    crypto_v2_manager_service_multi_get_projects_v2_args/0,
    crypto_v2_manager_service_get_all_projects_v2_args/0,
    crypto_v2_manager_service_update_project_metadata_v2_args/0,
    crypto_v2_manager_service_rewrap_keys_v2_args/0,
    crypto_v2_manager_service_rotate_keys_v2_args/0,
    crypto_v2_manager_service_set_next_key_v2_args/0,
    crypto_v2_manager_service_soft_delete_project_v2_args/0,
    crypto_v2_manager_service_undelete_project_v2_args/0,
    crypto_v2_manager_service_purge_project_v2_args/0,
    crypto_v2_manager_service_delete_old_key_v2_args/0,
    crypto_v2_manager_service_create_project_v2_result/0,
    crypto_v2_manager_service_get_project_v2_result/0,
    crypto_v2_manager_service_multi_get_projects_v2_result/0,
    crypto_v2_manager_service_get_all_projects_v2_result/0,
    crypto_v2_manager_service_update_project_metadata_v2_result/0,
    crypto_v2_manager_service_rewrap_keys_v2_result/0,
    crypto_v2_manager_service_rotate_keys_v2_result/0,
    crypto_v2_manager_service_set_next_key_v2_result/0,
    crypto_v2_manager_service_soft_delete_project_v2_result/0,
    crypto_v2_manager_service_undelete_project_v2_result/0,
    crypto_v2_manager_service_purge_project_v2_result/0,
    crypto_v2_manager_service_delete_old_key_v2_result/0
]).

-include_lib("thriftrpc/include/thriftrpc_runtime.hrl").
-include_lib("thriftrpc/include/thrift_reflection.hrl").
-include("thrift_crypto_v2_if_crypto_v2_manager.hrl").

-type tget_project_request_mode_constants() ::
      unknown
    | key_material_excluded
    | key_material_required
    | key_material_optional.
-type tget_project_request_mode() ::
      tget_project_request_mode_constants()
    | {'unknown_enum_constant', integer() | string() | binary() | atom()}.

-type get_project_response_or_error_v2() ::
      {project_response, get_project_response_v2()}
    | {service_exception, thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception()}
    | {retryable_service_exception, thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception()}
    | {client_exception, thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception()}
    | {permission_denied_exception, thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception()}
    | {project_not_found_exception, thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()}
    | 'empty'.


-type create_project_request_v2() :: #crypto_v2_manager_create_project_request_v2{}.
-type create_project_response_v2() :: #crypto_v2_manager_create_project_response_v2{}.
-type get_project_request_v2() :: #crypto_v2_manager_get_project_request_v2{}.
-type get_project_response_v2() :: #crypto_v2_manager_get_project_response_v2{}.
-type update_project_metadata_request_v2() :: #crypto_v2_manager_update_project_metadata_request_v2{}.
-type update_project_metadata_response_v2() :: #crypto_v2_manager_update_project_metadata_response_v2{}.
-type rewrap_keys_request_v2() :: #crypto_v2_manager_rewrap_keys_request_v2{}.
-type rewrap_keys_response_v2() :: #crypto_v2_manager_rewrap_keys_response_v2{}.
-type rotate_keys_request_v2() :: #crypto_v2_manager_rotate_keys_request_v2{}.
-type rotate_keys_response_v2() :: #crypto_v2_manager_rotate_keys_response_v2{}.
-type key_algorithm_options() :: #crypto_v2_manager_key_algorithm_options{}.
-type set_next_key_request_v2() :: #crypto_v2_manager_set_next_key_request_v2{}.
-type set_next_key_response_v2() :: #crypto_v2_manager_set_next_key_response_v2{}.
-type soft_delete_project_request_v2() :: #crypto_v2_manager_soft_delete_project_request_v2{}.
-type soft_delete_project_response_v2() :: #crypto_v2_manager_soft_delete_project_response_v2{}.
-type undelete_project_request_v2() :: #crypto_v2_manager_undelete_project_request_v2{}.
-type undelete_project_response_v2() :: #crypto_v2_manager_undelete_project_response_v2{}.
-type purge_project_request_v2() :: #crypto_v2_manager_purge_project_request_v2{}.
-type purge_project_response_v2() :: #crypto_v2_manager_purge_project_response_v2{}.
-type multi_get_projects_request_v2() :: #crypto_v2_manager_multi_get_projects_request_v2{}.
-type multi_get_projects_response_element_v2() :: #crypto_v2_manager_multi_get_projects_response_element_v2{}.
-type multi_get_projects_response_v2() :: #crypto_v2_manager_multi_get_projects_response_v2{}.
-type get_all_projects_response_v2() :: #crypto_v2_manager_get_all_projects_response_v2{}.
-type delete_old_key_request_v2() :: #crypto_v2_manager_delete_old_key_request_v2{}.
-type delete_old_key_response_v2() :: #crypto_v2_manager_delete_old_key_response_v2{}.
-type crypto_v2_manager_service_create_project_v2_args() :: #{
    request => create_project_request_v2()
}.
-type crypto_v2_manager_service_get_project_v2_args() :: #{
    request => get_project_request_v2()
}.
-type crypto_v2_manager_service_multi_get_projects_v2_args() :: #{
    request => multi_get_projects_request_v2()
}.
-type crypto_v2_manager_service_get_all_projects_v2_args() :: #{}.
-type crypto_v2_manager_service_update_project_metadata_v2_args() :: #{
    request => update_project_metadata_request_v2()
}.
-type crypto_v2_manager_service_rewrap_keys_v2_args() :: #{
    request => rewrap_keys_request_v2()
}.
-type crypto_v2_manager_service_rotate_keys_v2_args() :: #{
    request => rotate_keys_request_v2()
}.
-type crypto_v2_manager_service_set_next_key_v2_args() :: #{
    request => set_next_key_request_v2()
}.
-type crypto_v2_manager_service_soft_delete_project_v2_args() :: #{
    request => soft_delete_project_request_v2()
}.
-type crypto_v2_manager_service_undelete_project_v2_args() :: #{
    request => undelete_project_request_v2()
}.
-type crypto_v2_manager_service_purge_project_v2_args() :: #{
    request => purge_project_request_v2()
}.
-type crypto_v2_manager_service_delete_old_key_v2_args() :: #{
    request => delete_old_key_request_v2()
}.
-type crypto_v2_manager_service_create_project_v2_result() :: #{
    success => create_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception()
}.
-type crypto_v2_manager_service_get_project_v2_result() :: #{
    success => get_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.
-type crypto_v2_manager_service_multi_get_projects_v2_result() :: #{
    success => multi_get_projects_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception()
}.
-type crypto_v2_manager_service_get_all_projects_v2_result() :: #{
    success => get_all_projects_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception()
}.
-type crypto_v2_manager_service_update_project_metadata_v2_result() :: #{
    success => update_project_metadata_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.
-type crypto_v2_manager_service_rewrap_keys_v2_result() :: #{
    success => rewrap_keys_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.
-type crypto_v2_manager_service_rotate_keys_v2_result() :: #{
    success => rotate_keys_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.
-type crypto_v2_manager_service_set_next_key_v2_result() :: #{
    success => set_next_key_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.
-type crypto_v2_manager_service_soft_delete_project_v2_result() :: #{
    success => soft_delete_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.
-type crypto_v2_manager_service_undelete_project_v2_result() :: #{
    success => undelete_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.
-type crypto_v2_manager_service_purge_project_v2_result() :: #{
    success => purge_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.
-type crypto_v2_manager_service_delete_old_key_v2_result() :: #{
    success => delete_old_key_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:tcrypto_v2_project_not_found_exception()
}.


-spec default_crypto_v2_manager_create_project_request_v2() -> create_project_request_v2().
default_crypto_v2_manager_create_project_request_v2() -> #crypto_v2_manager_create_project_request_v2{
    project_metadata = thrift_crypto_v2_if_crypto_v2:default_crypto_v2_tproject_metadata()
}.
-spec default_crypto_v2_manager_create_project_response_v2() -> create_project_response_v2().
default_crypto_v2_manager_create_project_response_v2() -> #crypto_v2_manager_create_project_response_v2{
    project_with_keys = thrift_crypto_v2_if_crypto_v2:default_crypto_v2_tproject_with_keys()
}.
-spec default_crypto_v2_manager_get_project_request_v2() -> get_project_request_v2().
default_crypto_v2_manager_get_project_request_v2() -> #crypto_v2_manager_get_project_request_v2{}.
-spec default_crypto_v2_manager_get_project_response_v2() -> get_project_response_v2().
default_crypto_v2_manager_get_project_response_v2() -> #crypto_v2_manager_get_project_response_v2{
    project_with_keys = thrift_crypto_v2_if_crypto_v2:default_crypto_v2_tproject_with_keys()
}.
-spec default_crypto_v2_manager_update_project_metadata_request_v2() -> update_project_metadata_request_v2().
default_crypto_v2_manager_update_project_metadata_request_v2() -> #crypto_v2_manager_update_project_metadata_request_v2{
    project_metadata = thrift_crypto_v2_if_crypto_v2:default_crypto_v2_tproject_metadata()
}.
-spec default_crypto_v2_manager_update_project_metadata_response_v2() -> update_project_metadata_response_v2().
default_crypto_v2_manager_update_project_metadata_response_v2() -> #crypto_v2_manager_update_project_metadata_response_v2{
    project = thrift_crypto_v2_if_crypto_v2:default_crypto_v2_tproject()
}.
-spec default_crypto_v2_manager_rewrap_keys_request_v2() -> rewrap_keys_request_v2().
default_crypto_v2_manager_rewrap_keys_request_v2() -> #crypto_v2_manager_rewrap_keys_request_v2{}.
-spec default_crypto_v2_manager_rewrap_keys_response_v2() -> rewrap_keys_response_v2().
default_crypto_v2_manager_rewrap_keys_response_v2() -> #crypto_v2_manager_rewrap_keys_response_v2{
    project = thrift_crypto_v2_if_crypto_v2:default_crypto_v2_tproject()
}.
-spec default_crypto_v2_manager_rotate_keys_request_v2() -> rotate_keys_request_v2().
default_crypto_v2_manager_rotate_keys_request_v2() -> #crypto_v2_manager_rotate_keys_request_v2{}.
-spec default_crypto_v2_manager_rotate_keys_response_v2() -> rotate_keys_response_v2().
default_crypto_v2_manager_rotate_keys_response_v2() -> #crypto_v2_manager_rotate_keys_response_v2{
    project = thrift_crypto_v2_if_crypto_v2:default_crypto_v2_tproject()
}.
-spec default_crypto_v2_manager_key_algorithm_options() -> key_algorithm_options().
default_crypto_v2_manager_key_algorithm_options() -> #crypto_v2_manager_key_algorithm_options{}.
-spec default_crypto_v2_manager_set_next_key_request_v2() -> set_next_key_request_v2().
default_crypto_v2_manager_set_next_key_request_v2() -> #crypto_v2_manager_set_next_key_request_v2{
    options = default_crypto_v2_manager_key_algorithm_options()
}.
-spec default_crypto_v2_manager_set_next_key_response_v2() -> set_next_key_response_v2().
default_crypto_v2_manager_set_next_key_response_v2() -> #crypto_v2_manager_set_next_key_response_v2{
    project = thrift_crypto_v2_if_crypto_v2:default_crypto_v2_tproject()
}.
-spec default_crypto_v2_manager_soft_delete_project_request_v2() -> soft_delete_project_request_v2().
default_crypto_v2_manager_soft_delete_project_request_v2() -> #crypto_v2_manager_soft_delete_project_request_v2{}.
-spec default_crypto_v2_manager_soft_delete_project_response_v2() -> soft_delete_project_response_v2().
default_crypto_v2_manager_soft_delete_project_response_v2() -> #crypto_v2_manager_soft_delete_project_response_v2{}.
-spec default_crypto_v2_manager_undelete_project_request_v2() -> undelete_project_request_v2().
default_crypto_v2_manager_undelete_project_request_v2() -> #crypto_v2_manager_undelete_project_request_v2{}.
-spec default_crypto_v2_manager_undelete_project_response_v2() -> undelete_project_response_v2().
default_crypto_v2_manager_undelete_project_response_v2() -> #crypto_v2_manager_undelete_project_response_v2{}.
-spec default_crypto_v2_manager_purge_project_request_v2() -> purge_project_request_v2().
default_crypto_v2_manager_purge_project_request_v2() -> #crypto_v2_manager_purge_project_request_v2{}.
-spec default_crypto_v2_manager_purge_project_response_v2() -> purge_project_response_v2().
default_crypto_v2_manager_purge_project_response_v2() -> #crypto_v2_manager_purge_project_response_v2{}.
-spec default_crypto_v2_manager_multi_get_projects_request_v2() -> multi_get_projects_request_v2().
default_crypto_v2_manager_multi_get_projects_request_v2() -> #crypto_v2_manager_multi_get_projects_request_v2{}.
-spec default_crypto_v2_manager_multi_get_projects_response_element_v2() -> multi_get_projects_response_element_v2().
default_crypto_v2_manager_multi_get_projects_response_element_v2() -> #crypto_v2_manager_multi_get_projects_response_element_v2{}.
-spec default_crypto_v2_manager_multi_get_projects_response_v2() -> multi_get_projects_response_v2().
default_crypto_v2_manager_multi_get_projects_response_v2() -> #crypto_v2_manager_multi_get_projects_response_v2{}.
-spec default_crypto_v2_manager_get_all_projects_response_v2() -> get_all_projects_response_v2().
default_crypto_v2_manager_get_all_projects_response_v2() -> #crypto_v2_manager_get_all_projects_response_v2{}.
-spec default_crypto_v2_manager_delete_old_key_request_v2() -> delete_old_key_request_v2().
default_crypto_v2_manager_delete_old_key_request_v2() -> #crypto_v2_manager_delete_old_key_request_v2{}.
-spec default_crypto_v2_manager_delete_old_key_response_v2() -> delete_old_key_response_v2().
default_crypto_v2_manager_delete_old_key_response_v2() -> #crypto_v2_manager_delete_old_key_response_v2{}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_create_project_v2_args() -> crypto_v2_manager_service_create_project_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_create_project_v2_args() -> #{
    request => default_crypto_v2_manager_create_project_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_get_project_v2_args() -> crypto_v2_manager_service_get_project_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_get_project_v2_args() -> #{
    request => default_crypto_v2_manager_get_project_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_args() -> crypto_v2_manager_service_multi_get_projects_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_args() -> #{
    request => default_crypto_v2_manager_multi_get_projects_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_args() -> crypto_v2_manager_service_get_all_projects_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_args() -> #{}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_args() -> crypto_v2_manager_service_update_project_metadata_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_args() -> #{
    request => default_crypto_v2_manager_update_project_metadata_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_args() -> crypto_v2_manager_service_rewrap_keys_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_args() -> #{
    request => default_crypto_v2_manager_rewrap_keys_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_args() -> crypto_v2_manager_service_rotate_keys_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_args() -> #{
    request => default_crypto_v2_manager_rotate_keys_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_args() -> crypto_v2_manager_service_set_next_key_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_args() -> #{
    request => default_crypto_v2_manager_set_next_key_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_args() -> crypto_v2_manager_service_soft_delete_project_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_args() -> #{
    request => default_crypto_v2_manager_soft_delete_project_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_args() -> crypto_v2_manager_service_undelete_project_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_args() -> #{
    request => default_crypto_v2_manager_undelete_project_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_args() -> crypto_v2_manager_service_purge_project_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_args() -> #{
    request => default_crypto_v2_manager_purge_project_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_args() -> crypto_v2_manager_service_delete_old_key_v2_args().
default_crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_args() -> #{
    request => default_crypto_v2_manager_delete_old_key_request_v2()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_create_project_v2_result() -> crypto_v2_manager_service_create_project_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_create_project_v2_result() -> #{
    success => default_crypto_v2_manager_create_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_get_project_v2_result() -> crypto_v2_manager_service_get_project_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_get_project_v2_result() -> #{
    success => default_crypto_v2_manager_get_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_result() -> crypto_v2_manager_service_multi_get_projects_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_result() -> #{
    success => default_crypto_v2_manager_multi_get_projects_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_result() -> crypto_v2_manager_service_get_all_projects_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_result() -> #{
    success => default_crypto_v2_manager_get_all_projects_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_result() -> crypto_v2_manager_service_update_project_metadata_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_result() -> #{
    success => default_crypto_v2_manager_update_project_metadata_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_result() -> crypto_v2_manager_service_rewrap_keys_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_result() -> #{
    success => default_crypto_v2_manager_rewrap_keys_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_result() -> crypto_v2_manager_service_rotate_keys_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_result() -> #{
    success => default_crypto_v2_manager_rotate_keys_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_result() -> crypto_v2_manager_service_set_next_key_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_result() -> #{
    success => default_crypto_v2_manager_set_next_key_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_result() -> crypto_v2_manager_service_soft_delete_project_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_result() -> #{
    success => default_crypto_v2_manager_soft_delete_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_result() -> crypto_v2_manager_service_undelete_project_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_result() -> #{
    success => default_crypto_v2_manager_undelete_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_result() -> crypto_v2_manager_service_purge_project_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_result() -> #{
    success => default_crypto_v2_manager_purge_project_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.
-spec default_crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_result() -> crypto_v2_manager_service_delete_old_key_v2_result().
default_crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_result() -> #{
    success => default_crypto_v2_manager_delete_old_key_response_v2(),
    excs => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_exception(),
    excsr => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_service_retryable_exception(),
    excc => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_client_exception(),
    expd => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_permission_denied_exception(),
    expnf => thrift_crypto_v2_if_crypto_v2_common:default_crypto_v2_common_tcrypto_v2_project_not_found_exception()
}.


-spec gen_create_project_request_v2(X :: create_project_request_v2()) -> iodata().

gen_create_project_request_v2(X = #crypto_v2_manager_create_project_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_create_project_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_create_project_request_v2.oncall of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_BINARY, thrift_runtime:gen_string(S2In)) end,
    S3 = case S3In = X#crypto_v2_manager_create_project_request_v2.maintainer_identities of 'undefined' -> S2; _ -> thrift_runtime:gen_field(S2, 3, ?CP_LIST, thrift_runtime:gen_list(?CP_STRUCT, [thrift_configerator_structs_infrasec_if_acl:gen_identity(X0) || X0 <- S3In])) end,
    S4 = case S4In = X#crypto_v2_manager_create_project_request_v2.project_metadata of 'undefined' -> S3; _ -> thrift_runtime:gen_field(S3, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tproject_metadata(S4In)) end,
    S5 = case S5In = X#crypto_v2_manager_create_project_request_v2.key_platform_type of 'undefined' -> S4; _ -> thrift_runtime:gen_field(S4, 5, ?CP_INT32, thrift_crypto_v2_if_crypto_v2:gen_tkey_platform_type(S5In)) end,
    S6 = case S6In = X#crypto_v2_manager_create_project_request_v2.key_symmetry_type of 'undefined' -> S5; _ -> thrift_runtime:gen_field(S5, 6, ?CP_INT32, thrift_crypto_v2_if_crypto_v2:gen_tkey_symmetry_type(S6In)) end,
    S7 = case S7In = X#crypto_v2_manager_create_project_request_v2.identities_for_actions of 'undefined' -> S6; _ -> thrift_runtime:gen_field(S6, 7, ?CP_MAP, thrift_runtime:gen_map(?CP_BINARY, ?CP_LIST, [[thrift_runtime:gen_string(K0), thrift_runtime:gen_list(?CP_STRUCT, [thrift_configerator_structs_infrasec_if_acl:gen_identity(X1) || X1 <- V0])] || {K0, V0} <- S7In])) end,
    thrift_runtime:gen_struct_end(S7).


-spec gen_create_project_response_v2(X :: create_project_response_v2()) -> iodata().

gen_create_project_response_v2(X = #crypto_v2_manager_create_project_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_create_project_response_v2.project_with_keys of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tproject_with_keys(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_tget_project_request_mode(X :: tget_project_request_mode()) -> iodata().

gen_tget_project_request_mode(X) ->
    thrift_runtime:gen_enum(tget_project_request_mode_atom_to_integer(X)).

-spec tget_project_request_mode_atom_to_integer(tget_project_request_mode()) -> integer().
tget_project_request_mode_atom_to_integer(X) ->
    case X of
        unknown -> 0;
        key_material_excluded -> 1;
        key_material_required -> 2;
        key_material_optional -> 3;
        {'unknown_enum_constant', Int} when is_integer(Int) -> Int;
        _ -> thrift_runtime:throw_error({invalid_enum_value, X})
    end.



-spec gen_get_project_request_v2(X :: get_project_request_v2()) -> iodata().

gen_get_project_request_v2(X = #crypto_v2_manager_get_project_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_get_project_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_get_project_request_v2.mode of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_INT32, gen_tget_project_request_mode(S2In)) end,
    thrift_runtime:gen_struct_end(S2).


-spec gen_get_project_response_v2(X :: get_project_response_v2()) -> iodata().

gen_get_project_response_v2(X = #crypto_v2_manager_get_project_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_get_project_response_v2.project_with_keys of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tproject_with_keys(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_update_project_metadata_request_v2(X :: update_project_metadata_request_v2()) -> iodata().

gen_update_project_metadata_request_v2(X = #crypto_v2_manager_update_project_metadata_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_update_project_metadata_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_update_project_metadata_request_v2.project_metadata of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tproject_metadata(S2In)) end,
    S3 = case S3In = X#crypto_v2_manager_update_project_metadata_request_v2.version_to_update of 'undefined' -> S2; _ -> thrift_runtime:gen_field(S2, 3, ?CP_INT64, thrift_runtime:gen_i64(S3In)) end,
    thrift_runtime:gen_struct_end(S3).


-spec gen_update_project_metadata_response_v2(X :: update_project_metadata_response_v2()) -> iodata().

gen_update_project_metadata_response_v2(X = #crypto_v2_manager_update_project_metadata_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_update_project_metadata_response_v2.project of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tproject(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_rewrap_keys_request_v2(X :: rewrap_keys_request_v2()) -> iodata().

gen_rewrap_keys_request_v2(X = #crypto_v2_manager_rewrap_keys_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_rewrap_keys_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_rewrap_keys_request_v2.wrapper_key_identifier of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_BINARY, thrift_runtime:gen_string(S2In)) end,
    S3 = case S3In = X#crypto_v2_manager_rewrap_keys_request_v2.version_to_update of 'undefined' -> S2; _ -> thrift_runtime:gen_field(S2, 3, ?CP_INT64, thrift_runtime:gen_i64(S3In)) end,
    thrift_runtime:gen_struct_end(S3).


-spec gen_rewrap_keys_response_v2(X :: rewrap_keys_response_v2()) -> iodata().

gen_rewrap_keys_response_v2(X = #crypto_v2_manager_rewrap_keys_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_rewrap_keys_response_v2.project of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tproject(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_rotate_keys_request_v2(X :: rotate_keys_request_v2()) -> iodata().

gen_rotate_keys_request_v2(X = #crypto_v2_manager_rotate_keys_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_rotate_keys_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_rotate_keys_request_v2.version_to_update of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_INT64, thrift_runtime:gen_i64(S2In)) end,
    thrift_runtime:gen_struct_end(S2).


-spec gen_rotate_keys_response_v2(X :: rotate_keys_response_v2()) -> iodata().

gen_rotate_keys_response_v2(X = #crypto_v2_manager_rotate_keys_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_rotate_keys_response_v2.project of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tproject(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_key_algorithm_options(X :: key_algorithm_options()) -> iodata().

gen_key_algorithm_options(X = #crypto_v2_manager_key_algorithm_options{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_key_algorithm_options.authentication_algorithm_options of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tauthentication_algorithm_options(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_key_algorithm_options.encryption_algorithm_options of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tencryption_algorithm_options(S2In)) end,
    thrift_runtime:gen_struct_end(S2).


-spec gen_set_next_key_request_v2(X :: set_next_key_request_v2()) -> iodata().

gen_set_next_key_request_v2(X = #crypto_v2_manager_set_next_key_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_set_next_key_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_set_next_key_request_v2.options of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_STRUCT, gen_key_algorithm_options(S2In)) end,
    S3 = case S3In = X#crypto_v2_manager_set_next_key_request_v2.version_to_update of 'undefined' -> S2; _ -> thrift_runtime:gen_field(S2, 3, ?CP_INT64, thrift_runtime:gen_i64(S3In)) end,
    thrift_runtime:gen_struct_end(S3).


-spec gen_set_next_key_response_v2(X :: set_next_key_response_v2()) -> iodata().

gen_set_next_key_response_v2(X = #crypto_v2_manager_set_next_key_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_set_next_key_response_v2.project of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2:gen_tproject(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_soft_delete_project_request_v2(X :: soft_delete_project_request_v2()) -> iodata().

gen_soft_delete_project_request_v2(X = #crypto_v2_manager_soft_delete_project_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_soft_delete_project_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_soft_delete_project_response_v2(X :: soft_delete_project_response_v2()) -> iodata().

gen_soft_delete_project_response_v2(#crypto_v2_manager_soft_delete_project_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    thrift_runtime:gen_struct_end(S0).


-spec gen_undelete_project_request_v2(X :: undelete_project_request_v2()) -> iodata().

gen_undelete_project_request_v2(X = #crypto_v2_manager_undelete_project_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_undelete_project_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_undelete_project_response_v2(X :: undelete_project_response_v2()) -> iodata().

gen_undelete_project_response_v2(#crypto_v2_manager_undelete_project_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    thrift_runtime:gen_struct_end(S0).


-spec gen_purge_project_request_v2(X :: purge_project_request_v2()) -> iodata().

gen_purge_project_request_v2(X = #crypto_v2_manager_purge_project_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_purge_project_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_purge_project_response_v2(X :: purge_project_response_v2()) -> iodata().

gen_purge_project_response_v2(#crypto_v2_manager_purge_project_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    thrift_runtime:gen_struct_end(S0).


-spec gen_multi_get_projects_request_v2(X :: multi_get_projects_request_v2()) -> iodata().

gen_multi_get_projects_request_v2(X = #crypto_v2_manager_multi_get_projects_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_multi_get_projects_request_v2.project_requests of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_LIST, thrift_runtime:gen_list(?CP_STRUCT, [gen_get_project_request_v2(X0) || X0 <- S1In])) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_get_project_response_or_error_v2(X :: get_project_response_or_error_v2()) -> iodata().

gen_get_project_response_or_error_v2(X) ->
    case X of
        {project_response, Y} -> thrift_runtime:gen_union(1, ?CP_STRUCT, gen_get_project_response_v2(Y));
        {service_exception, Y} -> thrift_runtime:gen_union(2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(Y));
        {retryable_service_exception, Y} -> thrift_runtime:gen_union(3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(Y));
        {client_exception, Y} -> thrift_runtime:gen_union(4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(Y));
        {permission_denied_exception, Y} -> thrift_runtime:gen_union(5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(Y));
        {project_not_found_exception, Y} -> thrift_runtime:gen_union(6, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(Y));
        'empty' -> thrift_runtime:gen_empty_union()
    end.


-spec gen_multi_get_projects_response_element_v2(X :: multi_get_projects_response_element_v2()) -> iodata().

gen_multi_get_projects_response_element_v2(X = #crypto_v2_manager_multi_get_projects_response_element_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_multi_get_projects_response_element_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_multi_get_projects_response_element_v2.mode of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_INT32, gen_tget_project_request_mode(S2In)) end,
    S3 = case S3In = X#crypto_v2_manager_multi_get_projects_response_element_v2.project_response_or_error of 'undefined' -> S2; _ -> thrift_runtime:gen_field(S2, 3, ?CP_STRUCT, gen_get_project_response_or_error_v2(S3In)) end,
    thrift_runtime:gen_struct_end(S3).


-spec gen_multi_get_projects_response_v2(X :: multi_get_projects_response_v2()) -> iodata().

gen_multi_get_projects_response_v2(X = #crypto_v2_manager_multi_get_projects_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_multi_get_projects_response_v2.results of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_LIST, thrift_runtime:gen_list(?CP_STRUCT, [gen_multi_get_projects_response_element_v2(X0) || X0 <- S1In])) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_get_all_projects_response_v2(X :: get_all_projects_response_v2()) -> iodata().

gen_get_all_projects_response_v2(X = #crypto_v2_manager_get_all_projects_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_get_all_projects_response_v2.projects of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_LIST, thrift_runtime:gen_list(?CP_STRUCT, [thrift_crypto_v2_if_crypto_v2:gen_tproject_with_keys(X0) || X0 <- S1In])) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_delete_old_key_request_v2(X :: delete_old_key_request_v2()) -> iodata().

gen_delete_old_key_request_v2(X = #crypto_v2_manager_delete_old_key_request_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case S1In = X#crypto_v2_manager_delete_old_key_request_v2.project_name of 'undefined' -> S0; _ -> thrift_runtime:gen_field(S0, 1, ?CP_BINARY, thrift_runtime:gen_string(S1In)) end,
    S2 = case S2In = X#crypto_v2_manager_delete_old_key_request_v2.key_id of 'undefined' -> S1; _ -> thrift_runtime:gen_field(S1, 2, ?CP_INT32, thrift_runtime:gen_i32(S2In)) end,
    thrift_runtime:gen_struct_end(S2).


-spec gen_delete_old_key_response_v2(X :: delete_old_key_response_v2()) -> iodata().

gen_delete_old_key_response_v2(#crypto_v2_manager_delete_old_key_response_v2{}) ->
    S0 = thrift_runtime:gen_struct_begin(),
    thrift_runtime:gen_struct_end(S0).


-spec gen_crypto_v2_manager_service_create_project_v2_args(X :: crypto_v2_manager_service_create_project_v2_args()) -> iodata().

gen_crypto_v2_manager_service_create_project_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_create_project_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_get_project_v2_args(X :: crypto_v2_manager_service_get_project_v2_args()) -> iodata().

gen_crypto_v2_manager_service_get_project_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_get_project_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_multi_get_projects_v2_args(X :: crypto_v2_manager_service_multi_get_projects_v2_args()) -> iodata().

gen_crypto_v2_manager_service_multi_get_projects_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_multi_get_projects_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_get_all_projects_v2_args(X :: crypto_v2_manager_service_get_all_projects_v2_args()) -> iodata().

gen_crypto_v2_manager_service_get_all_projects_v2_args(_X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    thrift_runtime:gen_struct_end(S0).


-spec gen_crypto_v2_manager_service_update_project_metadata_v2_args(X :: crypto_v2_manager_service_update_project_metadata_v2_args()) -> iodata().

gen_crypto_v2_manager_service_update_project_metadata_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_update_project_metadata_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_rewrap_keys_v2_args(X :: crypto_v2_manager_service_rewrap_keys_v2_args()) -> iodata().

gen_crypto_v2_manager_service_rewrap_keys_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_rewrap_keys_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_rotate_keys_v2_args(X :: crypto_v2_manager_service_rotate_keys_v2_args()) -> iodata().

gen_crypto_v2_manager_service_rotate_keys_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_rotate_keys_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_set_next_key_v2_args(X :: crypto_v2_manager_service_set_next_key_v2_args()) -> iodata().

gen_crypto_v2_manager_service_set_next_key_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_set_next_key_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_soft_delete_project_v2_args(X :: crypto_v2_manager_service_soft_delete_project_v2_args()) -> iodata().

gen_crypto_v2_manager_service_soft_delete_project_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_soft_delete_project_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_undelete_project_v2_args(X :: crypto_v2_manager_service_undelete_project_v2_args()) -> iodata().

gen_crypto_v2_manager_service_undelete_project_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_undelete_project_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_purge_project_v2_args(X :: crypto_v2_manager_service_purge_project_v2_args()) -> iodata().

gen_crypto_v2_manager_service_purge_project_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_purge_project_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_delete_old_key_v2_args(X :: crypto_v2_manager_service_delete_old_key_v2_args()) -> iodata().

gen_crypto_v2_manager_service_delete_old_key_v2_args(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(request, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 1, ?CP_STRUCT, gen_delete_old_key_request_v2(VV0)) end,
    thrift_runtime:gen_struct_end(S1).


-spec gen_crypto_v2_manager_service_create_project_v2_result(X :: crypto_v2_manager_service_create_project_v2_result()) -> iodata().

gen_crypto_v2_manager_service_create_project_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_create_project_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    thrift_runtime:gen_struct_end(S5).


-spec gen_crypto_v2_manager_service_get_project_v2_result(X :: crypto_v2_manager_service_get_project_v2_result()) -> iodata().

gen_crypto_v2_manager_service_get_project_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_get_project_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_crypto_v2_manager_service_multi_get_projects_v2_result(X :: crypto_v2_manager_service_multi_get_projects_v2_result()) -> iodata().

gen_crypto_v2_manager_service_multi_get_projects_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_multi_get_projects_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    thrift_runtime:gen_struct_end(S4).


-spec gen_crypto_v2_manager_service_get_all_projects_v2_result(X :: crypto_v2_manager_service_get_all_projects_v2_result()) -> iodata().

gen_crypto_v2_manager_service_get_all_projects_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_get_all_projects_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    thrift_runtime:gen_struct_end(S4).


-spec gen_crypto_v2_manager_service_update_project_metadata_v2_result(X :: crypto_v2_manager_service_update_project_metadata_v2_result()) -> iodata().

gen_crypto_v2_manager_service_update_project_metadata_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_update_project_metadata_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_crypto_v2_manager_service_rewrap_keys_v2_result(X :: crypto_v2_manager_service_rewrap_keys_v2_result()) -> iodata().

gen_crypto_v2_manager_service_rewrap_keys_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_rewrap_keys_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_crypto_v2_manager_service_rotate_keys_v2_result(X :: crypto_v2_manager_service_rotate_keys_v2_result()) -> iodata().

gen_crypto_v2_manager_service_rotate_keys_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_rotate_keys_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_crypto_v2_manager_service_set_next_key_v2_result(X :: crypto_v2_manager_service_set_next_key_v2_result()) -> iodata().

gen_crypto_v2_manager_service_set_next_key_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_set_next_key_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_crypto_v2_manager_service_soft_delete_project_v2_result(X :: crypto_v2_manager_service_soft_delete_project_v2_result()) -> iodata().

gen_crypto_v2_manager_service_soft_delete_project_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_soft_delete_project_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_crypto_v2_manager_service_undelete_project_v2_result(X :: crypto_v2_manager_service_undelete_project_v2_result()) -> iodata().

gen_crypto_v2_manager_service_undelete_project_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_undelete_project_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_crypto_v2_manager_service_purge_project_v2_result(X :: crypto_v2_manager_service_purge_project_v2_result()) -> iodata().

gen_crypto_v2_manager_service_purge_project_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_purge_project_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_crypto_v2_manager_service_delete_old_key_v2_result(X :: crypto_v2_manager_service_delete_old_key_v2_result()) -> iodata().

gen_crypto_v2_manager_service_delete_old_key_v2_result(X) ->
    S0 = thrift_runtime:gen_struct_begin(),
    S1 = case maps:get(success, X, undefined) of 'undefined' -> S0; VV0 -> thrift_runtime:gen_field(S0, 0, ?CP_STRUCT, gen_delete_old_key_response_v2(VV0)) end,
    S2 = case maps:get(excs, X, undefined) of 'undefined' -> S1; VV1 -> thrift_runtime:gen_field(S1, 1, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_exception(VV1)) end,
    S3 = case maps:get(excsr, X, undefined) of 'undefined' -> S2; VV2 -> thrift_runtime:gen_field(S2, 2, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_service_retryable_exception(VV2)) end,
    S4 = case maps:get(excc, X, undefined) of 'undefined' -> S3; VV3 -> thrift_runtime:gen_field(S3, 3, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_client_exception(VV3)) end,
    S5 = case maps:get(expd, X, undefined) of 'undefined' -> S4; VV4 -> thrift_runtime:gen_field(S4, 4, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_permission_denied_exception(VV4)) end,
    S6 = case maps:get(expnf, X, undefined) of 'undefined' -> S5; VV5 -> thrift_runtime:gen_field(S5, 5, ?CP_STRUCT, thrift_crypto_v2_if_crypto_v2_common:gen_tcrypto_v2_project_not_found_exception(VV5)) end,
    thrift_runtime:gen_struct_end(S6).


-spec gen_rpc_record(#thrift_rpc{}) -> #thrift_rpc{} | {error, {bad_thrift_rpc, #thrift_rpc{}}}.
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_create_project_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"createProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_create_project_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_create_project_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"createProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_create_project_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_get_project_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"getProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_get_project_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_get_project_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"getProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_get_project_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_multi_get_projects_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"multiGetProjectsV2">>,
                   bytes = gen_crypto_v2_manager_service_multi_get_projects_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_multi_get_projects_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"multiGetProjectsV2">>,
                   bytes = gen_crypto_v2_manager_service_multi_get_projects_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_get_all_projects_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"getAllProjectsV2">>,
                   bytes = gen_crypto_v2_manager_service_get_all_projects_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_get_all_projects_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"getAllProjectsV2">>,
                   bytes = gen_crypto_v2_manager_service_get_all_projects_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_update_project_metadata_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"updateProjectMetadataV2">>,
                   bytes = gen_crypto_v2_manager_service_update_project_metadata_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_update_project_metadata_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"updateProjectMetadataV2">>,
                   bytes = gen_crypto_v2_manager_service_update_project_metadata_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_rewrap_keys_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"rewrapKeysV2">>,
                   bytes = gen_crypto_v2_manager_service_rewrap_keys_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_rewrap_keys_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"rewrapKeysV2">>,
                   bytes = gen_crypto_v2_manager_service_rewrap_keys_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_rotate_keys_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"rotateKeysV2">>,
                   bytes = gen_crypto_v2_manager_service_rotate_keys_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_rotate_keys_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"rotateKeysV2">>,
                   bytes = gen_crypto_v2_manager_service_rotate_keys_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_set_next_key_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"setNextKeyV2">>,
                   bytes = gen_crypto_v2_manager_service_set_next_key_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_set_next_key_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"setNextKeyV2">>,
                   bytes = gen_crypto_v2_manager_service_set_next_key_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_soft_delete_project_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"softDeleteProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_soft_delete_project_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_soft_delete_project_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"softDeleteProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_soft_delete_project_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_undelete_project_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"undeleteProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_undelete_project_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_undelete_project_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"undeleteProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_undelete_project_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_purge_project_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"purgeProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_purge_project_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_purge_project_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"purgeProjectV2">>,
                   bytes = gen_crypto_v2_manager_service_purge_project_v2_result(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_delete_old_key_v2_args, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"deleteOldKeyV2">>,
                   bytes = gen_crypto_v2_manager_service_delete_old_key_v2_args(Record)};
gen_rpc_record(#thrift_rpc{name = undefined, record = {crypto_v2_manager_service_delete_old_key_v2_result, Record}} = Rpc) ->
    Rpc#thrift_rpc{name = <<"deleteOldKeyV2">>,
                   bytes = gen_crypto_v2_manager_service_delete_old_key_v2_result(Record)};
gen_rpc_record(Rpc) -> {error, {bad_thrift_rpc, Rpc}}.


-spec get_rpc_generators(string(), binary()) -> {ok, {atom(), atom()}} | {error, {unknown_function, string(), binary()}}.
get_rpc_generators("CryptoV2ManagerService", <<"createProjectV2">>) ->
  {ok, {gen_crypto_v2_manager_service_create_project_v2_args, gen_crypto_v2_manager_service_create_project_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"getProjectV2">>) ->
  {ok, {gen_crypto_v2_manager_service_get_project_v2_args, gen_crypto_v2_manager_service_get_project_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"multiGetProjectsV2">>) ->
  {ok, {gen_crypto_v2_manager_service_multi_get_projects_v2_args, gen_crypto_v2_manager_service_multi_get_projects_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"getAllProjectsV2">>) ->
  {ok, {gen_crypto_v2_manager_service_get_all_projects_v2_args, gen_crypto_v2_manager_service_get_all_projects_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"updateProjectMetadataV2">>) ->
  {ok, {gen_crypto_v2_manager_service_update_project_metadata_v2_args, gen_crypto_v2_manager_service_update_project_metadata_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"rewrapKeysV2">>) ->
  {ok, {gen_crypto_v2_manager_service_rewrap_keys_v2_args, gen_crypto_v2_manager_service_rewrap_keys_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"rotateKeysV2">>) ->
  {ok, {gen_crypto_v2_manager_service_rotate_keys_v2_args, gen_crypto_v2_manager_service_rotate_keys_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"setNextKeyV2">>) ->
  {ok, {gen_crypto_v2_manager_service_set_next_key_v2_args, gen_crypto_v2_manager_service_set_next_key_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"softDeleteProjectV2">>) ->
  {ok, {gen_crypto_v2_manager_service_soft_delete_project_v2_args, gen_crypto_v2_manager_service_soft_delete_project_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"undeleteProjectV2">>) ->
  {ok, {gen_crypto_v2_manager_service_undelete_project_v2_args, gen_crypto_v2_manager_service_undelete_project_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"purgeProjectV2">>) ->
  {ok, {gen_crypto_v2_manager_service_purge_project_v2_args, gen_crypto_v2_manager_service_purge_project_v2_result}};
get_rpc_generators("CryptoV2ManagerService", <<"deleteOldKeyV2">>) ->
  {ok, {gen_crypto_v2_manager_service_delete_old_key_v2_args, gen_crypto_v2_manager_service_delete_old_key_v2_result}};
get_rpc_generators(ServiceName, FuncName) -> {error, {unknown_function, ServiceName, FuncName}}.


-spec parse_create_project_request_v2(X :: binary()) -> create_project_request_v2().

parse_create_project_request_v2(X) ->
    {Res, Rest} = value_parse_create_project_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_create_project_request_v2(X :: binary()) -> {create_project_request_v2(), Rest :: binary()}.

value_parse_create_project_request_v2(X) ->
    {Struct, Rest} = fields_parse_create_project_request_v2(X, 0, #crypto_v2_manager_create_project_request_v2{}),
    
    {Struct, Rest}.

fields_parse_create_project_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_create_project_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_create_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_create_project_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_create_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_create_project_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_create_project_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_create_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_request_v2{project_name = Value});
fields_parse_create_project_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 2 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_create_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_request_v2{oncall = Value});
fields_parse_create_project_request_v2(<<15:4, ?CP_STRUCT:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Content/binary>>, 3 = FieldCode, ?CP_LIST, Struct) ->
    {Value, Rest} = thrift_runtime:parse_list_items(Content, fun (X) -> thrift_configerator_structs_infrasec_if_acl:value_parse_identity(X) end, ((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F), []),
    fields_parse_create_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_request_v2{maintainer_identities = Value});
fields_parse_create_project_request_v2(<<Length:4, ?CP_STRUCT:4, Content/binary>>, 3 = FieldCode, ?CP_LIST, Struct) ->
    {Value, Rest} = thrift_runtime:parse_list_items(Content, fun (X) -> thrift_configerator_structs_infrasec_if_acl:value_parse_identity(X) end, Length, []),
    fields_parse_create_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_request_v2{maintainer_identities = Value});
fields_parse_create_project_request_v2(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject_metadata(Y) end(X),
    fields_parse_create_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_request_v2{project_metadata = Value});
fields_parse_create_project_request_v2(X, 5 = FieldCode, ?CP_INT32, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tkey_platform_type(Y) end(X),
    fields_parse_create_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_request_v2{key_platform_type = Value});
fields_parse_create_project_request_v2(X, 6 = FieldCode, ?CP_INT32, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tkey_symmetry_type(Y) end(X),
    fields_parse_create_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_request_v2{key_symmetry_type = Value});
fields_parse_create_project_request_v2(X, 7 = FieldCode, ?CP_MAP, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_runtime:parse_map(?CP_BINARY, ?CP_LIST, fun (K0) -> thrift_runtime:parse_string(K0) end, fun (V0) -> thrift_runtime:parse_list(?CP_STRUCT, fun (Y1) -> thrift_configerator_structs_infrasec_if_acl:value_parse_identity(Y1) end, V0) end, Y) end(X),
    fields_parse_create_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_request_v2{identities_for_actions = Value});
fields_parse_create_project_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_create_project_request_v2(Rest2, FieldCode, Struct).



-spec parse_create_project_response_v2(X :: binary()) -> create_project_response_v2().

parse_create_project_response_v2(X) ->
    {Res, Rest} = value_parse_create_project_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_create_project_response_v2(X :: binary()) -> {create_project_response_v2(), Rest :: binary()}.

value_parse_create_project_response_v2(X) ->
    {Struct, Rest} = fields_parse_create_project_response_v2(X, 0, #crypto_v2_manager_create_project_response_v2{}),
    
    {Struct, Rest}.

fields_parse_create_project_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_create_project_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_create_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_create_project_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_create_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_create_project_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_create_project_response_v2(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject_with_keys(Y) end(X),
    fields_parse_create_project_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_create_project_response_v2{project_with_keys = Value});
fields_parse_create_project_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_create_project_response_v2(Rest2, FieldCode, Struct).



-spec parse_tget_project_request_mode(X :: binary()) -> tget_project_request_mode().

parse_tget_project_request_mode(X) ->
    {Res, Rest} = value_parse_tget_project_request_mode(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_tget_project_request_mode(X :: binary()) -> {tget_project_request_mode(), Rest :: binary()}.

value_parse_tget_project_request_mode(X) ->
    {Code, Rest} = thrift_runtime:parse_enum(X),
    Res = tget_project_request_mode_integer_to_atom(Code),
    {Res, Rest}.


-spec parse_get_project_request_v2(X :: binary()) -> get_project_request_v2().

parse_get_project_request_v2(X) ->
    {Res, Rest} = value_parse_get_project_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_get_project_request_v2(X :: binary()) -> {get_project_request_v2(), Rest :: binary()}.

value_parse_get_project_request_v2(X) ->
    {Struct, Rest} = fields_parse_get_project_request_v2(X, 0, #crypto_v2_manager_get_project_request_v2{}),
    
    {Struct, Rest}.

fields_parse_get_project_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_get_project_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_get_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_get_project_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_get_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_get_project_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_get_project_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_get_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_get_project_request_v2{project_name = Value});
fields_parse_get_project_request_v2(X, 2 = FieldCode, ?CP_INT32, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_tget_project_request_mode(Y) end(X),
    fields_parse_get_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_get_project_request_v2{mode = Value});
fields_parse_get_project_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_get_project_request_v2(Rest2, FieldCode, Struct).



-spec parse_get_project_response_v2(X :: binary()) -> get_project_response_v2().

parse_get_project_response_v2(X) ->
    {Res, Rest} = value_parse_get_project_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_get_project_response_v2(X :: binary()) -> {get_project_response_v2(), Rest :: binary()}.

value_parse_get_project_response_v2(X) ->
    {Struct, Rest} = fields_parse_get_project_response_v2(X, 0, #crypto_v2_manager_get_project_response_v2{}),
    
    {Struct, Rest}.

fields_parse_get_project_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_get_project_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_get_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_get_project_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_get_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_get_project_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_get_project_response_v2(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject_with_keys(Y) end(X),
    fields_parse_get_project_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_get_project_response_v2{project_with_keys = Value});
fields_parse_get_project_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_get_project_response_v2(Rest2, FieldCode, Struct).



-spec parse_update_project_metadata_request_v2(X :: binary()) -> update_project_metadata_request_v2().

parse_update_project_metadata_request_v2(X) ->
    {Res, Rest} = value_parse_update_project_metadata_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_update_project_metadata_request_v2(X :: binary()) -> {update_project_metadata_request_v2(), Rest :: binary()}.

value_parse_update_project_metadata_request_v2(X) ->
    {Struct, Rest} = fields_parse_update_project_metadata_request_v2(X, 0, #crypto_v2_manager_update_project_metadata_request_v2{}),
    
    {Struct, Rest}.

fields_parse_update_project_metadata_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_update_project_metadata_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_update_project_metadata_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_update_project_metadata_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_update_project_metadata_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_update_project_metadata_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_update_project_metadata_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_update_project_metadata_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_update_project_metadata_request_v2{project_name = Value});
fields_parse_update_project_metadata_request_v2(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject_metadata(Y) end(X),
    fields_parse_update_project_metadata_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_update_project_metadata_request_v2{project_metadata = Value});
fields_parse_update_project_metadata_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, F:(E bsr 7)/unit:8, G:(F bsr 7)/unit:8, H:(G bsr 7)/unit:8, I:(H bsr 7)/unit:8, J:(I bsr 7)/unit:8, Rest/binary>>, 3 = FieldCode, ?CP_INT64, Struct) ->
    fields_parse_update_project_metadata_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_update_project_metadata_request_v2{version_to_update = thrift_runtime:integer_of_zigzag_integer(((J band 16#7F) bsl 63) bor ((I band 16#7F) bsl 56) bor ((H band 16#7F) bsl 49) bor ((G band 16#7F) bsl 42) bor ((F band 16#7F) bsl 35) bor ((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))});
fields_parse_update_project_metadata_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_update_project_metadata_request_v2(Rest2, FieldCode, Struct).



-spec parse_update_project_metadata_response_v2(X :: binary()) -> update_project_metadata_response_v2().

parse_update_project_metadata_response_v2(X) ->
    {Res, Rest} = value_parse_update_project_metadata_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_update_project_metadata_response_v2(X :: binary()) -> {update_project_metadata_response_v2(), Rest :: binary()}.

value_parse_update_project_metadata_response_v2(X) ->
    {Struct, Rest} = fields_parse_update_project_metadata_response_v2(X, 0, #crypto_v2_manager_update_project_metadata_response_v2{}),
    
    {Struct, Rest}.

fields_parse_update_project_metadata_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_update_project_metadata_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_update_project_metadata_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_update_project_metadata_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_update_project_metadata_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_update_project_metadata_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_update_project_metadata_response_v2(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject(Y) end(X),
    fields_parse_update_project_metadata_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_update_project_metadata_response_v2{project = Value});
fields_parse_update_project_metadata_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_update_project_metadata_response_v2(Rest2, FieldCode, Struct).



-spec parse_rewrap_keys_request_v2(X :: binary()) -> rewrap_keys_request_v2().

parse_rewrap_keys_request_v2(X) ->
    {Res, Rest} = value_parse_rewrap_keys_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_rewrap_keys_request_v2(X :: binary()) -> {rewrap_keys_request_v2(), Rest :: binary()}.

value_parse_rewrap_keys_request_v2(X) ->
    {Struct, Rest} = fields_parse_rewrap_keys_request_v2(X, 0, #crypto_v2_manager_rewrap_keys_request_v2{}),
    
    {Struct, Rest}.

fields_parse_rewrap_keys_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_rewrap_keys_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_rewrap_keys_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_rewrap_keys_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_rewrap_keys_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_rewrap_keys_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_rewrap_keys_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_rewrap_keys_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_rewrap_keys_request_v2{project_name = Value});
fields_parse_rewrap_keys_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 2 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_rewrap_keys_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_rewrap_keys_request_v2{wrapper_key_identifier = Value});
fields_parse_rewrap_keys_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, F:(E bsr 7)/unit:8, G:(F bsr 7)/unit:8, H:(G bsr 7)/unit:8, I:(H bsr 7)/unit:8, J:(I bsr 7)/unit:8, Rest/binary>>, 3 = FieldCode, ?CP_INT64, Struct) ->
    fields_parse_rewrap_keys_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_rewrap_keys_request_v2{version_to_update = thrift_runtime:integer_of_zigzag_integer(((J band 16#7F) bsl 63) bor ((I band 16#7F) bsl 56) bor ((H band 16#7F) bsl 49) bor ((G band 16#7F) bsl 42) bor ((F band 16#7F) bsl 35) bor ((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))});
fields_parse_rewrap_keys_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_rewrap_keys_request_v2(Rest2, FieldCode, Struct).



-spec parse_rewrap_keys_response_v2(X :: binary()) -> rewrap_keys_response_v2().

parse_rewrap_keys_response_v2(X) ->
    {Res, Rest} = value_parse_rewrap_keys_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_rewrap_keys_response_v2(X :: binary()) -> {rewrap_keys_response_v2(), Rest :: binary()}.

value_parse_rewrap_keys_response_v2(X) ->
    {Struct, Rest} = fields_parse_rewrap_keys_response_v2(X, 0, #crypto_v2_manager_rewrap_keys_response_v2{}),
    
    {Struct, Rest}.

fields_parse_rewrap_keys_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_rewrap_keys_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_rewrap_keys_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_rewrap_keys_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_rewrap_keys_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_rewrap_keys_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_rewrap_keys_response_v2(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject(Y) end(X),
    fields_parse_rewrap_keys_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_rewrap_keys_response_v2{project = Value});
fields_parse_rewrap_keys_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_rewrap_keys_response_v2(Rest2, FieldCode, Struct).



-spec parse_rotate_keys_request_v2(X :: binary()) -> rotate_keys_request_v2().

parse_rotate_keys_request_v2(X) ->
    {Res, Rest} = value_parse_rotate_keys_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_rotate_keys_request_v2(X :: binary()) -> {rotate_keys_request_v2(), Rest :: binary()}.

value_parse_rotate_keys_request_v2(X) ->
    {Struct, Rest} = fields_parse_rotate_keys_request_v2(X, 0, #crypto_v2_manager_rotate_keys_request_v2{}),
    
    {Struct, Rest}.

fields_parse_rotate_keys_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_rotate_keys_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_rotate_keys_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_rotate_keys_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_rotate_keys_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_rotate_keys_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_rotate_keys_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_rotate_keys_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_rotate_keys_request_v2{project_name = Value});
fields_parse_rotate_keys_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, F:(E bsr 7)/unit:8, G:(F bsr 7)/unit:8, H:(G bsr 7)/unit:8, I:(H bsr 7)/unit:8, J:(I bsr 7)/unit:8, Rest/binary>>, 2 = FieldCode, ?CP_INT64, Struct) ->
    fields_parse_rotate_keys_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_rotate_keys_request_v2{version_to_update = thrift_runtime:integer_of_zigzag_integer(((J band 16#7F) bsl 63) bor ((I band 16#7F) bsl 56) bor ((H band 16#7F) bsl 49) bor ((G band 16#7F) bsl 42) bor ((F band 16#7F) bsl 35) bor ((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))});
fields_parse_rotate_keys_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_rotate_keys_request_v2(Rest2, FieldCode, Struct).



-spec parse_rotate_keys_response_v2(X :: binary()) -> rotate_keys_response_v2().

parse_rotate_keys_response_v2(X) ->
    {Res, Rest} = value_parse_rotate_keys_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_rotate_keys_response_v2(X :: binary()) -> {rotate_keys_response_v2(), Rest :: binary()}.

value_parse_rotate_keys_response_v2(X) ->
    {Struct, Rest} = fields_parse_rotate_keys_response_v2(X, 0, #crypto_v2_manager_rotate_keys_response_v2{}),
    
    {Struct, Rest}.

fields_parse_rotate_keys_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_rotate_keys_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_rotate_keys_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_rotate_keys_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_rotate_keys_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_rotate_keys_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_rotate_keys_response_v2(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject(Y) end(X),
    fields_parse_rotate_keys_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_rotate_keys_response_v2{project = Value});
fields_parse_rotate_keys_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_rotate_keys_response_v2(Rest2, FieldCode, Struct).



-spec parse_key_algorithm_options(X :: binary()) -> key_algorithm_options().

parse_key_algorithm_options(X) ->
    {Res, Rest} = value_parse_key_algorithm_options(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_key_algorithm_options(X :: binary()) -> {key_algorithm_options(), Rest :: binary()}.

value_parse_key_algorithm_options(X) ->
    {Struct, Rest} = fields_parse_key_algorithm_options(X, 0, #crypto_v2_manager_key_algorithm_options{}),
    
    {Struct, Rest}.

fields_parse_key_algorithm_options(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_key_algorithm_options(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_key_algorithm_options(Rest, FieldCode, TypeCode, Struct);
fields_parse_key_algorithm_options(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_key_algorithm_options(Rest, FieldCode, TypeCode, Struct);
fields_parse_key_algorithm_options(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_key_algorithm_options(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tauthentication_algorithm_options(Y) end(X),
    fields_parse_key_algorithm_options(Rest, FieldCode, Struct#crypto_v2_manager_key_algorithm_options{authentication_algorithm_options = Value});
fields_parse_key_algorithm_options(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tencryption_algorithm_options(Y) end(X),
    fields_parse_key_algorithm_options(Rest, FieldCode, Struct#crypto_v2_manager_key_algorithm_options{encryption_algorithm_options = Value});
fields_parse_key_algorithm_options(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_key_algorithm_options(Rest2, FieldCode, Struct).



-spec parse_set_next_key_request_v2(X :: binary()) -> set_next_key_request_v2().

parse_set_next_key_request_v2(X) ->
    {Res, Rest} = value_parse_set_next_key_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_set_next_key_request_v2(X :: binary()) -> {set_next_key_request_v2(), Rest :: binary()}.

value_parse_set_next_key_request_v2(X) ->
    {Struct, Rest} = fields_parse_set_next_key_request_v2(X, 0, #crypto_v2_manager_set_next_key_request_v2{}),
    
    {Struct, Rest}.

fields_parse_set_next_key_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_set_next_key_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_set_next_key_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_set_next_key_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_set_next_key_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_set_next_key_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_set_next_key_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_set_next_key_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_set_next_key_request_v2{project_name = Value});
fields_parse_set_next_key_request_v2(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_key_algorithm_options(Y) end(X),
    fields_parse_set_next_key_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_set_next_key_request_v2{options = Value});
fields_parse_set_next_key_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, F:(E bsr 7)/unit:8, G:(F bsr 7)/unit:8, H:(G bsr 7)/unit:8, I:(H bsr 7)/unit:8, J:(I bsr 7)/unit:8, Rest/binary>>, 3 = FieldCode, ?CP_INT64, Struct) ->
    fields_parse_set_next_key_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_set_next_key_request_v2{version_to_update = thrift_runtime:integer_of_zigzag_integer(((J band 16#7F) bsl 63) bor ((I band 16#7F) bsl 56) bor ((H band 16#7F) bsl 49) bor ((G band 16#7F) bsl 42) bor ((F band 16#7F) bsl 35) bor ((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))});
fields_parse_set_next_key_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_set_next_key_request_v2(Rest2, FieldCode, Struct).



-spec parse_set_next_key_response_v2(X :: binary()) -> set_next_key_response_v2().

parse_set_next_key_response_v2(X) ->
    {Res, Rest} = value_parse_set_next_key_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_set_next_key_response_v2(X :: binary()) -> {set_next_key_response_v2(), Rest :: binary()}.

value_parse_set_next_key_response_v2(X) ->
    {Struct, Rest} = fields_parse_set_next_key_response_v2(X, 0, #crypto_v2_manager_set_next_key_response_v2{}),
    
    {Struct, Rest}.

fields_parse_set_next_key_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_set_next_key_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_set_next_key_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_set_next_key_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_set_next_key_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_set_next_key_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_set_next_key_response_v2(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject(Y) end(X),
    fields_parse_set_next_key_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_set_next_key_response_v2{project = Value});
fields_parse_set_next_key_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_set_next_key_response_v2(Rest2, FieldCode, Struct).



-spec parse_soft_delete_project_request_v2(X :: binary()) -> soft_delete_project_request_v2().

parse_soft_delete_project_request_v2(X) ->
    {Res, Rest} = value_parse_soft_delete_project_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_soft_delete_project_request_v2(X :: binary()) -> {soft_delete_project_request_v2(), Rest :: binary()}.

value_parse_soft_delete_project_request_v2(X) ->
    {Struct, Rest} = fields_parse_soft_delete_project_request_v2(X, 0, #crypto_v2_manager_soft_delete_project_request_v2{}),
    
    {Struct, Rest}.

fields_parse_soft_delete_project_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_soft_delete_project_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_soft_delete_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_soft_delete_project_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_soft_delete_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_soft_delete_project_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_soft_delete_project_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_soft_delete_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_soft_delete_project_request_v2{project_name = Value});
fields_parse_soft_delete_project_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_soft_delete_project_request_v2(Rest2, FieldCode, Struct).



-spec parse_soft_delete_project_response_v2(X :: binary()) -> soft_delete_project_response_v2().

parse_soft_delete_project_response_v2(X) ->
    {Res, Rest} = value_parse_soft_delete_project_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_soft_delete_project_response_v2(X :: binary()) -> {soft_delete_project_response_v2(), Rest :: binary()}.

value_parse_soft_delete_project_response_v2(X) ->
    {Struct, Rest} = fields_parse_soft_delete_project_response_v2(X, 0, #crypto_v2_manager_soft_delete_project_response_v2{}),
    
    {Struct, Rest}.

fields_parse_soft_delete_project_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_soft_delete_project_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_soft_delete_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_soft_delete_project_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_soft_delete_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_soft_delete_project_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_soft_delete_project_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_soft_delete_project_response_v2(Rest2, FieldCode, Struct).



-spec parse_undelete_project_request_v2(X :: binary()) -> undelete_project_request_v2().

parse_undelete_project_request_v2(X) ->
    {Res, Rest} = value_parse_undelete_project_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_undelete_project_request_v2(X :: binary()) -> {undelete_project_request_v2(), Rest :: binary()}.

value_parse_undelete_project_request_v2(X) ->
    {Struct, Rest} = fields_parse_undelete_project_request_v2(X, 0, #crypto_v2_manager_undelete_project_request_v2{}),
    
    {Struct, Rest}.

fields_parse_undelete_project_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_undelete_project_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_undelete_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_undelete_project_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_undelete_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_undelete_project_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_undelete_project_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_undelete_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_undelete_project_request_v2{project_name = Value});
fields_parse_undelete_project_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_undelete_project_request_v2(Rest2, FieldCode, Struct).



-spec parse_undelete_project_response_v2(X :: binary()) -> undelete_project_response_v2().

parse_undelete_project_response_v2(X) ->
    {Res, Rest} = value_parse_undelete_project_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_undelete_project_response_v2(X :: binary()) -> {undelete_project_response_v2(), Rest :: binary()}.

value_parse_undelete_project_response_v2(X) ->
    {Struct, Rest} = fields_parse_undelete_project_response_v2(X, 0, #crypto_v2_manager_undelete_project_response_v2{}),
    
    {Struct, Rest}.

fields_parse_undelete_project_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_undelete_project_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_undelete_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_undelete_project_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_undelete_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_undelete_project_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_undelete_project_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_undelete_project_response_v2(Rest2, FieldCode, Struct).



-spec parse_purge_project_request_v2(X :: binary()) -> purge_project_request_v2().

parse_purge_project_request_v2(X) ->
    {Res, Rest} = value_parse_purge_project_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_purge_project_request_v2(X :: binary()) -> {purge_project_request_v2(), Rest :: binary()}.

value_parse_purge_project_request_v2(X) ->
    {Struct, Rest} = fields_parse_purge_project_request_v2(X, 0, #crypto_v2_manager_purge_project_request_v2{}),
    
    {Struct, Rest}.

fields_parse_purge_project_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_purge_project_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_purge_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_purge_project_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_purge_project_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_purge_project_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_purge_project_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_purge_project_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_purge_project_request_v2{project_name = Value});
fields_parse_purge_project_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_purge_project_request_v2(Rest2, FieldCode, Struct).



-spec parse_purge_project_response_v2(X :: binary()) -> purge_project_response_v2().

parse_purge_project_response_v2(X) ->
    {Res, Rest} = value_parse_purge_project_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_purge_project_response_v2(X :: binary()) -> {purge_project_response_v2(), Rest :: binary()}.

value_parse_purge_project_response_v2(X) ->
    {Struct, Rest} = fields_parse_purge_project_response_v2(X, 0, #crypto_v2_manager_purge_project_response_v2{}),
    
    {Struct, Rest}.

fields_parse_purge_project_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_purge_project_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_purge_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_purge_project_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_purge_project_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_purge_project_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_purge_project_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_purge_project_response_v2(Rest2, FieldCode, Struct).



-spec parse_multi_get_projects_request_v2(X :: binary()) -> multi_get_projects_request_v2().

parse_multi_get_projects_request_v2(X) ->
    {Res, Rest} = value_parse_multi_get_projects_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_multi_get_projects_request_v2(X :: binary()) -> {multi_get_projects_request_v2(), Rest :: binary()}.

value_parse_multi_get_projects_request_v2(X) ->
    {Struct, Rest} = fields_parse_multi_get_projects_request_v2(X, 0, #crypto_v2_manager_multi_get_projects_request_v2{}),
    
    {Struct, Rest}.

fields_parse_multi_get_projects_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_multi_get_projects_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_multi_get_projects_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_multi_get_projects_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_multi_get_projects_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_multi_get_projects_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_multi_get_projects_request_v2(<<15:4, ?CP_STRUCT:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Content/binary>>, 1 = FieldCode, ?CP_LIST, Struct) ->
    {Value, Rest} = thrift_runtime:parse_list_items(Content, fun (X) -> value_parse_get_project_request_v2(X) end, ((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F), []),
    fields_parse_multi_get_projects_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_multi_get_projects_request_v2{project_requests = Value});
fields_parse_multi_get_projects_request_v2(<<Length:4, ?CP_STRUCT:4, Content/binary>>, 1 = FieldCode, ?CP_LIST, Struct) ->
    {Value, Rest} = thrift_runtime:parse_list_items(Content, fun (X) -> value_parse_get_project_request_v2(X) end, Length, []),
    fields_parse_multi_get_projects_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_multi_get_projects_request_v2{project_requests = Value});
fields_parse_multi_get_projects_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_multi_get_projects_request_v2(Rest2, FieldCode, Struct).



-spec parse_get_project_response_or_error_v2(X :: binary()) -> get_project_response_or_error_v2().

parse_get_project_response_or_error_v2(X) ->
    {Res, Rest} = value_parse_get_project_response_or_error_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_get_project_response_or_error_v2(X :: binary()) -> {get_project_response_or_error_v2(), Rest :: binary()}.

value_parse_get_project_response_or_error_v2(X) ->
    thrift_runtime:parse_union(X, fun fields_parse_get_project_response_or_error_v2/3, 'empty').

fields_parse_get_project_response_or_error_v2(X, Code, TypeCode) ->
    case {Code, TypeCode} of
        {1, ?CP_STRUCT} ->
            {Value, Rest} = fun (Y) -> value_parse_get_project_response_v2(Y) end(X),
            {value, {project_response, Value}, Rest};
        {2, ?CP_STRUCT} ->
            {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
            {value, {service_exception, Value}, Rest};
        {3, ?CP_STRUCT} ->
            {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
            {value, {retryable_service_exception, Value}, Rest};
        {4, ?CP_STRUCT} ->
            {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
            {value, {client_exception, Value}, Rest};
        {5, ?CP_STRUCT} ->
            {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
            {value, {permission_denied_exception, Value}, Rest};
        {6, ?CP_STRUCT} ->
            {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
            {value, {project_not_found_exception, Value}, Rest};
        _ ->
            skip
    end.


-spec parse_multi_get_projects_response_element_v2(X :: binary()) -> multi_get_projects_response_element_v2().

parse_multi_get_projects_response_element_v2(X) ->
    {Res, Rest} = value_parse_multi_get_projects_response_element_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_multi_get_projects_response_element_v2(X :: binary()) -> {multi_get_projects_response_element_v2(), Rest :: binary()}.

value_parse_multi_get_projects_response_element_v2(X) ->
    {Struct, Rest} = fields_parse_multi_get_projects_response_element_v2(X, 0, #crypto_v2_manager_multi_get_projects_response_element_v2{}),
    
    {Struct, Rest}.

fields_parse_multi_get_projects_response_element_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_multi_get_projects_response_element_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_multi_get_projects_response_element_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_multi_get_projects_response_element_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_multi_get_projects_response_element_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_multi_get_projects_response_element_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_multi_get_projects_response_element_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_multi_get_projects_response_element_v2(Rest, FieldCode, Struct#crypto_v2_manager_multi_get_projects_response_element_v2{project_name = Value});
fields_parse_multi_get_projects_response_element_v2(X, 2 = FieldCode, ?CP_INT32, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_tget_project_request_mode(Y) end(X),
    fields_parse_multi_get_projects_response_element_v2(Rest, FieldCode, Struct#crypto_v2_manager_multi_get_projects_response_element_v2{mode = Value});
fields_parse_multi_get_projects_response_element_v2(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_get_project_response_or_error_v2(Y) end(X),
    fields_parse_multi_get_projects_response_element_v2(Rest, FieldCode, Struct#crypto_v2_manager_multi_get_projects_response_element_v2{project_response_or_error = Value});
fields_parse_multi_get_projects_response_element_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_multi_get_projects_response_element_v2(Rest2, FieldCode, Struct).



-spec parse_multi_get_projects_response_v2(X :: binary()) -> multi_get_projects_response_v2().

parse_multi_get_projects_response_v2(X) ->
    {Res, Rest} = value_parse_multi_get_projects_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_multi_get_projects_response_v2(X :: binary()) -> {multi_get_projects_response_v2(), Rest :: binary()}.

value_parse_multi_get_projects_response_v2(X) ->
    {Struct, Rest} = fields_parse_multi_get_projects_response_v2(X, 0, #crypto_v2_manager_multi_get_projects_response_v2{}),
    
    {Struct, Rest}.

fields_parse_multi_get_projects_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_multi_get_projects_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_multi_get_projects_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_multi_get_projects_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_multi_get_projects_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_multi_get_projects_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_multi_get_projects_response_v2(<<15:4, ?CP_STRUCT:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Content/binary>>, 1 = FieldCode, ?CP_LIST, Struct) ->
    {Value, Rest} = thrift_runtime:parse_list_items(Content, fun (X) -> value_parse_multi_get_projects_response_element_v2(X) end, ((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F), []),
    fields_parse_multi_get_projects_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_multi_get_projects_response_v2{results = Value});
fields_parse_multi_get_projects_response_v2(<<Length:4, ?CP_STRUCT:4, Content/binary>>, 1 = FieldCode, ?CP_LIST, Struct) ->
    {Value, Rest} = thrift_runtime:parse_list_items(Content, fun (X) -> value_parse_multi_get_projects_response_element_v2(X) end, Length, []),
    fields_parse_multi_get_projects_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_multi_get_projects_response_v2{results = Value});
fields_parse_multi_get_projects_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_multi_get_projects_response_v2(Rest2, FieldCode, Struct).



-spec parse_get_all_projects_response_v2(X :: binary()) -> get_all_projects_response_v2().

parse_get_all_projects_response_v2(X) ->
    {Res, Rest} = value_parse_get_all_projects_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_get_all_projects_response_v2(X :: binary()) -> {get_all_projects_response_v2(), Rest :: binary()}.

value_parse_get_all_projects_response_v2(X) ->
    {Struct, Rest} = fields_parse_get_all_projects_response_v2(X, 0, #crypto_v2_manager_get_all_projects_response_v2{}),
    
    {Struct, Rest}.

fields_parse_get_all_projects_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_get_all_projects_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_get_all_projects_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_get_all_projects_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_get_all_projects_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_get_all_projects_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_get_all_projects_response_v2(<<15:4, ?CP_STRUCT:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Content/binary>>, 1 = FieldCode, ?CP_LIST, Struct) ->
    {Value, Rest} = thrift_runtime:parse_list_items(Content, fun (X) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject_with_keys(X) end, ((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F), []),
    fields_parse_get_all_projects_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_get_all_projects_response_v2{projects = Value});
fields_parse_get_all_projects_response_v2(<<Length:4, ?CP_STRUCT:4, Content/binary>>, 1 = FieldCode, ?CP_LIST, Struct) ->
    {Value, Rest} = thrift_runtime:parse_list_items(Content, fun (X) -> thrift_crypto_v2_if_crypto_v2:value_parse_tproject_with_keys(X) end, Length, []),
    fields_parse_get_all_projects_response_v2(Rest, FieldCode, Struct#crypto_v2_manager_get_all_projects_response_v2{projects = Value});
fields_parse_get_all_projects_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_get_all_projects_response_v2(Rest2, FieldCode, Struct).



-spec parse_delete_old_key_request_v2(X :: binary()) -> delete_old_key_request_v2().

parse_delete_old_key_request_v2(X) ->
    {Res, Rest} = value_parse_delete_old_key_request_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_delete_old_key_request_v2(X :: binary()) -> {delete_old_key_request_v2(), Rest :: binary()}.

value_parse_delete_old_key_request_v2(X) ->
    {Struct, Rest} = fields_parse_delete_old_key_request_v2(X, 0, #crypto_v2_manager_delete_old_key_request_v2{}),
    
    {Struct, Rest}.

fields_parse_delete_old_key_request_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_delete_old_key_request_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_delete_old_key_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_delete_old_key_request_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_delete_old_key_request_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_delete_old_key_request_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_delete_old_key_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Value:(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))/binary, Rest/binary>>, 1 = FieldCode, ?CP_BINARY, Struct) ->
    fields_parse_delete_old_key_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_delete_old_key_request_v2{project_name = Value});
fields_parse_delete_old_key_request_v2(<<A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, D:(C bsr 7)/unit:8, E:(D bsr 7)/unit:8, Rest/binary>>, 2 = FieldCode, ?CP_INT32, Struct) ->
    fields_parse_delete_old_key_request_v2(Rest, FieldCode, Struct#crypto_v2_manager_delete_old_key_request_v2{key_id = thrift_runtime:integer_of_zigzag_integer(((E band 16#7F) bsl 28) bor ((D band 16#7F) bsl 21) bor ((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F))});
fields_parse_delete_old_key_request_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_delete_old_key_request_v2(Rest2, FieldCode, Struct).



-spec parse_delete_old_key_response_v2(X :: binary()) -> delete_old_key_response_v2().

parse_delete_old_key_response_v2(X) ->
    {Res, Rest} = value_parse_delete_old_key_response_v2(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_delete_old_key_response_v2(X :: binary()) -> {delete_old_key_response_v2(), Rest :: binary()}.

value_parse_delete_old_key_response_v2(X) ->
    {Struct, Rest} = fields_parse_delete_old_key_response_v2(X, 0, #crypto_v2_manager_delete_old_key_response_v2{}),
    
    {Struct, Rest}.

fields_parse_delete_old_key_response_v2(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_delete_old_key_response_v2(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_delete_old_key_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_delete_old_key_response_v2(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_delete_old_key_response_v2(Rest, FieldCode, TypeCode, Struct);
fields_parse_delete_old_key_response_v2(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_delete_old_key_response_v2(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_delete_old_key_response_v2(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_create_project_v2_args(X :: binary()) -> crypto_v2_manager_service_create_project_v2_args().

parse_crypto_v2_manager_service_create_project_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_create_project_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_create_project_v2_args(X :: binary()) -> {crypto_v2_manager_service_create_project_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_create_project_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_create_project_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_create_project_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_create_project_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_create_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_create_project_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_create_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_create_project_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_create_project_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_create_project_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_create_project_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_create_project_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_create_project_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_get_project_v2_args(X :: binary()) -> crypto_v2_manager_service_get_project_v2_args().

parse_crypto_v2_manager_service_get_project_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_get_project_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_get_project_v2_args(X :: binary()) -> {crypto_v2_manager_service_get_project_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_get_project_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_get_project_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_get_project_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_get_project_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_get_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_get_project_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_get_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_get_project_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_get_project_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_get_project_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_project_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_get_project_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_get_project_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_multi_get_projects_v2_args(X :: binary()) -> crypto_v2_manager_service_multi_get_projects_v2_args().

parse_crypto_v2_manager_service_multi_get_projects_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_multi_get_projects_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_multi_get_projects_v2_args(X :: binary()) -> {crypto_v2_manager_service_multi_get_projects_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_multi_get_projects_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_multi_get_projects_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_get_all_projects_v2_args(X :: binary()) -> crypto_v2_manager_service_get_all_projects_v2_args().

parse_crypto_v2_manager_service_get_all_projects_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_get_all_projects_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_get_all_projects_v2_args(X :: binary()) -> {crypto_v2_manager_service_get_all_projects_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_get_all_projects_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_update_project_metadata_v2_args(X :: binary()) -> crypto_v2_manager_service_update_project_metadata_v2_args().

parse_crypto_v2_manager_service_update_project_metadata_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_update_project_metadata_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_update_project_metadata_v2_args(X :: binary()) -> {crypto_v2_manager_service_update_project_metadata_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_update_project_metadata_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_update_project_metadata_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_rewrap_keys_v2_args(X :: binary()) -> crypto_v2_manager_service_rewrap_keys_v2_args().

parse_crypto_v2_manager_service_rewrap_keys_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_rewrap_keys_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_rewrap_keys_v2_args(X :: binary()) -> {crypto_v2_manager_service_rewrap_keys_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_rewrap_keys_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_rewrap_keys_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_rotate_keys_v2_args(X :: binary()) -> crypto_v2_manager_service_rotate_keys_v2_args().

parse_crypto_v2_manager_service_rotate_keys_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_rotate_keys_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_rotate_keys_v2_args(X :: binary()) -> {crypto_v2_manager_service_rotate_keys_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_rotate_keys_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_rotate_keys_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_set_next_key_v2_args(X :: binary()) -> crypto_v2_manager_service_set_next_key_v2_args().

parse_crypto_v2_manager_service_set_next_key_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_set_next_key_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_set_next_key_v2_args(X :: binary()) -> {crypto_v2_manager_service_set_next_key_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_set_next_key_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_set_next_key_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_set_next_key_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_set_next_key_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_set_next_key_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_set_next_key_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_set_next_key_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_set_next_key_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_set_next_key_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_set_next_key_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_soft_delete_project_v2_args(X :: binary()) -> crypto_v2_manager_service_soft_delete_project_v2_args().

parse_crypto_v2_manager_service_soft_delete_project_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_soft_delete_project_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_soft_delete_project_v2_args(X :: binary()) -> {crypto_v2_manager_service_soft_delete_project_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_soft_delete_project_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_soft_delete_project_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_undelete_project_v2_args(X :: binary()) -> crypto_v2_manager_service_undelete_project_v2_args().

parse_crypto_v2_manager_service_undelete_project_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_undelete_project_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_undelete_project_v2_args(X :: binary()) -> {crypto_v2_manager_service_undelete_project_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_undelete_project_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_undelete_project_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_undelete_project_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_undelete_project_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_undelete_project_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_undelete_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_undelete_project_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_undelete_project_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_undelete_project_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_undelete_project_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_purge_project_v2_args(X :: binary()) -> crypto_v2_manager_service_purge_project_v2_args().

parse_crypto_v2_manager_service_purge_project_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_purge_project_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_purge_project_v2_args(X :: binary()) -> {crypto_v2_manager_service_purge_project_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_purge_project_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_purge_project_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_purge_project_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_purge_project_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_purge_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_purge_project_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_purge_project_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_purge_project_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_purge_project_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_purge_project_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_purge_project_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_purge_project_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_purge_project_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_delete_old_key_v2_args(X :: binary()) -> crypto_v2_manager_service_delete_old_key_v2_args().

parse_crypto_v2_manager_service_delete_old_key_v2_args(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_delete_old_key_v2_args(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_delete_old_key_v2_args(X :: binary()) -> {crypto_v2_manager_service_delete_old_key_v2_args(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_delete_old_key_v2_args(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_delete_old_key_request_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(Rest, FieldCode, Struct#{request => Value});
fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_args(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_create_project_v2_result(X :: binary()) -> crypto_v2_manager_service_create_project_v2_result().

parse_crypto_v2_manager_service_create_project_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_create_project_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_create_project_v2_result(X :: binary()) -> {crypto_v2_manager_service_create_project_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_create_project_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_create_project_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_create_project_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_create_project_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_create_project_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_create_project_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_create_project_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_create_project_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_create_project_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_create_project_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_create_project_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_create_project_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_create_project_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_get_project_v2_result(X :: binary()) -> crypto_v2_manager_service_get_project_v2_result().

parse_crypto_v2_manager_service_get_project_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_get_project_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_get_project_v2_result(X :: binary()) -> {crypto_v2_manager_service_get_project_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_get_project_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_get_project_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_get_project_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_get_project_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_get_project_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_get_project_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_get_project_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_get_project_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_get_project_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_get_project_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_get_project_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_get_project_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_get_project_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_get_project_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_multi_get_projects_v2_result(X :: binary()) -> crypto_v2_manager_service_multi_get_projects_v2_result().

parse_crypto_v2_manager_service_multi_get_projects_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_multi_get_projects_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_multi_get_projects_v2_result(X :: binary()) -> {crypto_v2_manager_service_multi_get_projects_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_multi_get_projects_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_multi_get_projects_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_multi_get_projects_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_get_all_projects_v2_result(X :: binary()) -> crypto_v2_manager_service_get_all_projects_v2_result().

parse_crypto_v2_manager_service_get_all_projects_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_get_all_projects_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_get_all_projects_v2_result(X :: binary()) -> {crypto_v2_manager_service_get_all_projects_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_get_all_projects_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_get_all_projects_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_get_all_projects_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_update_project_metadata_v2_result(X :: binary()) -> crypto_v2_manager_service_update_project_metadata_v2_result().

parse_crypto_v2_manager_service_update_project_metadata_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X :: binary()) -> {crypto_v2_manager_service_update_project_metadata_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_update_project_metadata_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_update_project_metadata_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_rewrap_keys_v2_result(X :: binary()) -> crypto_v2_manager_service_rewrap_keys_v2_result().

parse_crypto_v2_manager_service_rewrap_keys_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X :: binary()) -> {crypto_v2_manager_service_rewrap_keys_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_rewrap_keys_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_rewrap_keys_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_rotate_keys_v2_result(X :: binary()) -> crypto_v2_manager_service_rotate_keys_v2_result().

parse_crypto_v2_manager_service_rotate_keys_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_rotate_keys_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_rotate_keys_v2_result(X :: binary()) -> {crypto_v2_manager_service_rotate_keys_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_rotate_keys_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_rotate_keys_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_rotate_keys_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_set_next_key_v2_result(X :: binary()) -> crypto_v2_manager_service_set_next_key_v2_result().

parse_crypto_v2_manager_service_set_next_key_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_set_next_key_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_set_next_key_v2_result(X :: binary()) -> {crypto_v2_manager_service_set_next_key_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_set_next_key_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_set_next_key_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_set_next_key_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_set_next_key_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_set_next_key_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_set_next_key_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_soft_delete_project_v2_result(X :: binary()) -> crypto_v2_manager_service_soft_delete_project_v2_result().

parse_crypto_v2_manager_service_soft_delete_project_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X :: binary()) -> {crypto_v2_manager_service_soft_delete_project_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_soft_delete_project_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_soft_delete_project_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_undelete_project_v2_result(X :: binary()) -> crypto_v2_manager_service_undelete_project_v2_result().

parse_crypto_v2_manager_service_undelete_project_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_undelete_project_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_undelete_project_v2_result(X :: binary()) -> {crypto_v2_manager_service_undelete_project_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_undelete_project_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_undelete_project_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_undelete_project_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_undelete_project_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_undelete_project_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_undelete_project_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_purge_project_v2_result(X :: binary()) -> crypto_v2_manager_service_purge_project_v2_result().

parse_crypto_v2_manager_service_purge_project_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_purge_project_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_purge_project_v2_result(X :: binary()) -> {crypto_v2_manager_service_purge_project_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_purge_project_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_purge_project_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_purge_project_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_purge_project_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_purge_project_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_purge_project_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_purge_project_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_purge_project_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_purge_project_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_purge_project_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_purge_project_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_purge_project_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_purge_project_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_purge_project_v2_result(Rest2, FieldCode, Struct).



-spec parse_crypto_v2_manager_service_delete_old_key_v2_result(X :: binary()) -> crypto_v2_manager_service_delete_old_key_v2_result().

parse_crypto_v2_manager_service_delete_old_key_v2_result(X) ->
    {Res, Rest} = value_parse_crypto_v2_manager_service_delete_old_key_v2_result(X),
    Rest =:= <<>> orelse thrift_runtime:error_trailing_bytes(Rest),
    Res.

-spec value_parse_crypto_v2_manager_service_delete_old_key_v2_result(X :: binary()) -> {crypto_v2_manager_service_delete_old_key_v2_result(), Rest :: binary()}.

value_parse_crypto_v2_manager_service_delete_old_key_v2_result(X) ->
    {Struct, Rest} = fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(X, 0, #{}),
    
    {Struct, Rest}.

fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(<<?CP_STOP, Rest/binary>>, _PrevField, Struct) ->
    {Struct, Rest};
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(<<0:4, TypeCode:4, A, B:(A bsr 7)/unit:8, C:(B bsr 7)/unit:8, Rest/binary>>, _PrevField, Struct) ->
    FieldCode = thrift_runtime:integer_of_zigzag_integer(((C band 16#7F) bsl 14) bor ((B band 16#7F) bsl 7) bor (A band 16#7F)),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(<<FieldDelta:4, TypeCode:4, Rest/binary>>, PrevField, Struct) ->
    FieldCode = PrevField + FieldDelta,
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, TypeCode, Struct);
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(<<>>, _PrevField, _Struct) ->
    thrift_runtime:throw_error('field_header_overrun').


fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(X, 0 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> value_parse_delete_old_key_response_v2(Y) end(X),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, Struct#{success => Value});
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(X, 1 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, Struct#{excs => Value});
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(X, 2 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_service_retryable_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, Struct#{excsr => Value});
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(X, 3 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_client_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, Struct#{excc => Value});
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(X, 4 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_permission_denied_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, Struct#{expd => Value});
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(X, 5 = FieldCode, ?CP_STRUCT, Struct) ->
    {Value, Rest} = fun (Y) -> thrift_crypto_v2_if_crypto_v2_common:value_parse_tcrypto_v2_project_not_found_exception(Y) end(X),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, Struct#{expnf => Value});
fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest, FieldCode, TypeCode, Struct) ->
    Rest2 = thrift_runtime:skip_field_value(Rest, TypeCode),
    fields_parse_crypto_v2_manager_service_delete_old_key_v2_result(Rest2, FieldCode, Struct).



-spec parse_rpc_record(#thrift_rpc{}) -> #thrift_rpc{} | {error, {bad_thrift_rpc, #thrift_rpc{}}}.
parse_rpc_record(#thrift_rpc{name = <<"createProjectV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_create_project_v2_args, parse_crypto_v2_manager_service_create_project_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"createProjectV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_create_project_v2_result, parse_crypto_v2_manager_service_create_project_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"getProjectV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_get_project_v2_args, parse_crypto_v2_manager_service_get_project_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"getProjectV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_get_project_v2_result, parse_crypto_v2_manager_service_get_project_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"multiGetProjectsV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_multi_get_projects_v2_args, parse_crypto_v2_manager_service_multi_get_projects_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"multiGetProjectsV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_multi_get_projects_v2_result, parse_crypto_v2_manager_service_multi_get_projects_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"getAllProjectsV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_get_all_projects_v2_args, parse_crypto_v2_manager_service_get_all_projects_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"getAllProjectsV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_get_all_projects_v2_result, parse_crypto_v2_manager_service_get_all_projects_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"updateProjectMetadataV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_update_project_metadata_v2_args, parse_crypto_v2_manager_service_update_project_metadata_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"updateProjectMetadataV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_update_project_metadata_v2_result, parse_crypto_v2_manager_service_update_project_metadata_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"rewrapKeysV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_rewrap_keys_v2_args, parse_crypto_v2_manager_service_rewrap_keys_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"rewrapKeysV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_rewrap_keys_v2_result, parse_crypto_v2_manager_service_rewrap_keys_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"rotateKeysV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_rotate_keys_v2_args, parse_crypto_v2_manager_service_rotate_keys_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"rotateKeysV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_rotate_keys_v2_result, parse_crypto_v2_manager_service_rotate_keys_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"setNextKeyV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_set_next_key_v2_args, parse_crypto_v2_manager_service_set_next_key_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"setNextKeyV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_set_next_key_v2_result, parse_crypto_v2_manager_service_set_next_key_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"softDeleteProjectV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_soft_delete_project_v2_args, parse_crypto_v2_manager_service_soft_delete_project_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"softDeleteProjectV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_soft_delete_project_v2_result, parse_crypto_v2_manager_service_soft_delete_project_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"undeleteProjectV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_undelete_project_v2_args, parse_crypto_v2_manager_service_undelete_project_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"undeleteProjectV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_undelete_project_v2_result, parse_crypto_v2_manager_service_undelete_project_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"purgeProjectV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_purge_project_v2_args, parse_crypto_v2_manager_service_purge_project_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"purgeProjectV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_purge_project_v2_result, parse_crypto_v2_manager_service_purge_project_v2_result(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"deleteOldKeyV2">>, message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso (MT =:= ?THRIFT_MESSAGE_TYPE_CALL orelse MT =:= ?THRIFT_MESSAGE_TYPE_ONEWAY) ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_delete_old_key_v2_args, parse_crypto_v2_manager_service_delete_old_key_v2_args(Bytes)}};
parse_rpc_record(#thrift_rpc{name = <<"deleteOldKeyV2">>,message_type = MT, bytes = Bytes} = Rpc)
  when is_binary(Bytes) andalso MT =:= ?THRIFT_MESSAGE_TYPE_REPLY ->
    Rpc#thrift_rpc{record = {crypto_v2_manager_service_delete_old_key_v2_result, parse_crypto_v2_manager_service_delete_old_key_v2_result(Bytes)}};
parse_rpc_record(Rpc) -> {error, {bad_thrift_rpc, Rpc}}.


-spec get_rpc_parsers(string(), binary()) -> {ok, {atom(), atom()}} | {error, {unknown_function, string(), binary()}}.
get_rpc_parsers("CryptoV2ManagerService", <<"createProjectV2">>) ->
  {ok, {parse_crypto_v2_manager_service_create_project_v2_args, parse_crypto_v2_manager_service_create_project_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"getProjectV2">>) ->
  {ok, {parse_crypto_v2_manager_service_get_project_v2_args, parse_crypto_v2_manager_service_get_project_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"multiGetProjectsV2">>) ->
  {ok, {parse_crypto_v2_manager_service_multi_get_projects_v2_args, parse_crypto_v2_manager_service_multi_get_projects_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"getAllProjectsV2">>) ->
  {ok, {parse_crypto_v2_manager_service_get_all_projects_v2_args, parse_crypto_v2_manager_service_get_all_projects_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"updateProjectMetadataV2">>) ->
  {ok, {parse_crypto_v2_manager_service_update_project_metadata_v2_args, parse_crypto_v2_manager_service_update_project_metadata_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"rewrapKeysV2">>) ->
  {ok, {parse_crypto_v2_manager_service_rewrap_keys_v2_args, parse_crypto_v2_manager_service_rewrap_keys_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"rotateKeysV2">>) ->
  {ok, {parse_crypto_v2_manager_service_rotate_keys_v2_args, parse_crypto_v2_manager_service_rotate_keys_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"setNextKeyV2">>) ->
  {ok, {parse_crypto_v2_manager_service_set_next_key_v2_args, parse_crypto_v2_manager_service_set_next_key_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"softDeleteProjectV2">>) ->
  {ok, {parse_crypto_v2_manager_service_soft_delete_project_v2_args, parse_crypto_v2_manager_service_soft_delete_project_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"undeleteProjectV2">>) ->
  {ok, {parse_crypto_v2_manager_service_undelete_project_v2_args, parse_crypto_v2_manager_service_undelete_project_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"purgeProjectV2">>) ->
  {ok, {parse_crypto_v2_manager_service_purge_project_v2_args, parse_crypto_v2_manager_service_purge_project_v2_result}};
get_rpc_parsers("CryptoV2ManagerService", <<"deleteOldKeyV2">>) ->
  {ok, {parse_crypto_v2_manager_service_delete_old_key_v2_args, parse_crypto_v2_manager_service_delete_old_key_v2_result}};
get_rpc_parsers(ServiceName, FuncName) -> {error, {unknown_function, ServiceName, FuncName}}.


-spec spec_create_project_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_create_project_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_create_project_request_v2.project_name, binary},
        2 => {#crypto_v2_manager_create_project_request_v2.oncall, binary},
        3 => {#crypto_v2_manager_create_project_request_v2.maintainer_identities, {list, fun thrift_configerator_structs_infrasec_if_acl:spec_identity/0}},
        4 => {#crypto_v2_manager_create_project_request_v2.project_metadata, fun thrift_crypto_v2_if_crypto_v2:spec_tproject_metadata/0},
        5 => {#crypto_v2_manager_create_project_request_v2.key_platform_type, fun thrift_crypto_v2_if_crypto_v2:spec_tkey_platform_type/0},
        6 => {#crypto_v2_manager_create_project_request_v2.key_symmetry_type, fun thrift_crypto_v2_if_crypto_v2:spec_tkey_symmetry_type/0},
        7 => {#crypto_v2_manager_create_project_request_v2.identities_for_actions, {map, binary, {list, fun thrift_configerator_structs_infrasec_if_acl:spec_identity/0}, orddict}}
    },
    {struct, {record, Types, crypto_v2_manager_create_project_request_v2, record_info(size, crypto_v2_manager_create_project_request_v2), [], [], #{}}}.

-spec spec_create_project_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_create_project_response_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_create_project_response_v2.project_with_keys, fun thrift_crypto_v2_if_crypto_v2:spec_tproject_with_keys/0}
    },
    {struct, {record, Types, crypto_v2_manager_create_project_response_v2, record_info(size, crypto_v2_manager_create_project_response_v2), [], [], #{}}}.

-spec spec_tget_project_request_mode() -> {enum, thrift_decode:enum_config()}.
spec_tget_project_request_mode() ->
    {enum, #{
        0 => unknown,
        1 => key_material_excluded,
        2 => key_material_required,
        3 => key_material_optional
    }}.

-spec spec_get_project_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_get_project_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_get_project_request_v2.project_name, binary},
        2 => {#crypto_v2_manager_get_project_request_v2.mode, spec_tget_project_request_mode()}
    },
    {struct, {record, Types, crypto_v2_manager_get_project_request_v2, record_info(size, crypto_v2_manager_get_project_request_v2), [], [], #{}}}.

-spec spec_get_project_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_get_project_response_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_get_project_response_v2.project_with_keys, fun thrift_crypto_v2_if_crypto_v2:spec_tproject_with_keys/0}
    },
    {struct, {record, Types, crypto_v2_manager_get_project_response_v2, record_info(size, crypto_v2_manager_get_project_response_v2), [], [], #{}}}.

-spec spec_update_project_metadata_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_update_project_metadata_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_update_project_metadata_request_v2.project_name, binary},
        2 => {#crypto_v2_manager_update_project_metadata_request_v2.project_metadata, fun thrift_crypto_v2_if_crypto_v2:spec_tproject_metadata/0},
        3 => {#crypto_v2_manager_update_project_metadata_request_v2.version_to_update, int64}
    },
    {struct, {record, Types, crypto_v2_manager_update_project_metadata_request_v2, record_info(size, crypto_v2_manager_update_project_metadata_request_v2), [], [], #{}}}.

-spec spec_update_project_metadata_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_update_project_metadata_response_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_update_project_metadata_response_v2.project, fun thrift_crypto_v2_if_crypto_v2:spec_tproject/0}
    },
    {struct, {record, Types, crypto_v2_manager_update_project_metadata_response_v2, record_info(size, crypto_v2_manager_update_project_metadata_response_v2), [], [], #{}}}.

-spec spec_rewrap_keys_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_rewrap_keys_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_rewrap_keys_request_v2.project_name, binary},
        2 => {#crypto_v2_manager_rewrap_keys_request_v2.wrapper_key_identifier, binary},
        3 => {#crypto_v2_manager_rewrap_keys_request_v2.version_to_update, int64}
    },
    {struct, {record, Types, crypto_v2_manager_rewrap_keys_request_v2, record_info(size, crypto_v2_manager_rewrap_keys_request_v2), [], [], #{}}}.

-spec spec_rewrap_keys_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_rewrap_keys_response_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_rewrap_keys_response_v2.project, fun thrift_crypto_v2_if_crypto_v2:spec_tproject/0}
    },
    {struct, {record, Types, crypto_v2_manager_rewrap_keys_response_v2, record_info(size, crypto_v2_manager_rewrap_keys_response_v2), [], [], #{}}}.

-spec spec_rotate_keys_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_rotate_keys_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_rotate_keys_request_v2.project_name, binary},
        2 => {#crypto_v2_manager_rotate_keys_request_v2.version_to_update, int64}
    },
    {struct, {record, Types, crypto_v2_manager_rotate_keys_request_v2, record_info(size, crypto_v2_manager_rotate_keys_request_v2), [], [], #{}}}.

-spec spec_rotate_keys_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_rotate_keys_response_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_rotate_keys_response_v2.project, fun thrift_crypto_v2_if_crypto_v2:spec_tproject/0}
    },
    {struct, {record, Types, crypto_v2_manager_rotate_keys_response_v2, record_info(size, crypto_v2_manager_rotate_keys_response_v2), [], [], #{}}}.

-spec spec_key_algorithm_options() -> {struct, thrift_decode:struct_config()}.
spec_key_algorithm_options() ->
    Types = #{
        1 => {#crypto_v2_manager_key_algorithm_options.authentication_algorithm_options, fun thrift_crypto_v2_if_crypto_v2:spec_tauthentication_algorithm_options/0},
        2 => {#crypto_v2_manager_key_algorithm_options.encryption_algorithm_options, fun thrift_crypto_v2_if_crypto_v2:spec_tencryption_algorithm_options/0}
    },
    {struct, {record, Types, crypto_v2_manager_key_algorithm_options, record_info(size, crypto_v2_manager_key_algorithm_options), [], [], #{}}}.

-spec spec_set_next_key_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_set_next_key_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_set_next_key_request_v2.project_name, binary},
        2 => {#crypto_v2_manager_set_next_key_request_v2.options, spec_key_algorithm_options()},
        3 => {#crypto_v2_manager_set_next_key_request_v2.version_to_update, int64}
    },
    {struct, {record, Types, crypto_v2_manager_set_next_key_request_v2, record_info(size, crypto_v2_manager_set_next_key_request_v2), [], [], #{}}}.

-spec spec_set_next_key_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_set_next_key_response_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_set_next_key_response_v2.project, fun thrift_crypto_v2_if_crypto_v2:spec_tproject/0}
    },
    {struct, {record, Types, crypto_v2_manager_set_next_key_response_v2, record_info(size, crypto_v2_manager_set_next_key_response_v2), [], [], #{}}}.

-spec spec_soft_delete_project_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_soft_delete_project_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_soft_delete_project_request_v2.project_name, binary}
    },
    {struct, {record, Types, crypto_v2_manager_soft_delete_project_request_v2, record_info(size, crypto_v2_manager_soft_delete_project_request_v2), [], [], #{}}}.

-spec spec_soft_delete_project_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_soft_delete_project_response_v2() ->
    {struct, {record, #{}, crypto_v2_manager_soft_delete_project_response_v2, record_info(size, crypto_v2_manager_soft_delete_project_response_v2), [], [], #{}}}.

-spec spec_undelete_project_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_undelete_project_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_undelete_project_request_v2.project_name, binary}
    },
    {struct, {record, Types, crypto_v2_manager_undelete_project_request_v2, record_info(size, crypto_v2_manager_undelete_project_request_v2), [], [], #{}}}.

-spec spec_undelete_project_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_undelete_project_response_v2() ->
    {struct, {record, #{}, crypto_v2_manager_undelete_project_response_v2, record_info(size, crypto_v2_manager_undelete_project_response_v2), [], [], #{}}}.

-spec spec_purge_project_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_purge_project_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_purge_project_request_v2.project_name, binary}
    },
    {struct, {record, Types, crypto_v2_manager_purge_project_request_v2, record_info(size, crypto_v2_manager_purge_project_request_v2), [], [], #{}}}.

-spec spec_purge_project_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_purge_project_response_v2() ->
    {struct, {record, #{}, crypto_v2_manager_purge_project_response_v2, record_info(size, crypto_v2_manager_purge_project_response_v2), [], [], #{}}}.

-spec spec_multi_get_projects_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_multi_get_projects_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_multi_get_projects_request_v2.project_requests, {list, spec_get_project_request_v2()}}
    },
    {struct, {record, Types, crypto_v2_manager_multi_get_projects_request_v2, record_info(size, crypto_v2_manager_multi_get_projects_request_v2), [], [], #{}}}.

-spec spec_get_project_response_or_error_v2() -> {struct, thrift_decode:struct_config()}.
spec_get_project_response_or_error_v2() ->
    {struct, {union, #{
        1 => {project_response, spec_get_project_response_v2()},
        2 => {service_exception, fun thrift_crypto_v2_if_crypto_v2_common:spec_tcrypto_v2_service_exception/0},
        3 => {retryable_service_exception, fun thrift_crypto_v2_if_crypto_v2_common:spec_tcrypto_v2_service_retryable_exception/0},
        4 => {client_exception, fun thrift_crypto_v2_if_crypto_v2_common:spec_tcrypto_v2_client_exception/0},
        5 => {permission_denied_exception, fun thrift_crypto_v2_if_crypto_v2_common:spec_tcrypto_v2_permission_denied_exception/0},
        6 => {project_not_found_exception, fun thrift_crypto_v2_if_crypto_v2_common:spec_tcrypto_v2_project_not_found_exception/0}
    }}}.

-spec spec_multi_get_projects_response_element_v2() -> {struct, thrift_decode:struct_config()}.
spec_multi_get_projects_response_element_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_multi_get_projects_response_element_v2.project_name, binary},
        2 => {#crypto_v2_manager_multi_get_projects_response_element_v2.mode, spec_tget_project_request_mode()},
        3 => {#crypto_v2_manager_multi_get_projects_response_element_v2.project_response_or_error, spec_get_project_response_or_error_v2()}
    },
    {struct, {record, Types, crypto_v2_manager_multi_get_projects_response_element_v2, record_info(size, crypto_v2_manager_multi_get_projects_response_element_v2), [], [], #{}}}.

-spec spec_multi_get_projects_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_multi_get_projects_response_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_multi_get_projects_response_v2.results, {list, spec_multi_get_projects_response_element_v2()}}
    },
    {struct, {record, Types, crypto_v2_manager_multi_get_projects_response_v2, record_info(size, crypto_v2_manager_multi_get_projects_response_v2), [], [], #{}}}.

-spec spec_get_all_projects_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_get_all_projects_response_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_get_all_projects_response_v2.projects, {list, fun thrift_crypto_v2_if_crypto_v2:spec_tproject_with_keys/0}}
    },
    {struct, {record, Types, crypto_v2_manager_get_all_projects_response_v2, record_info(size, crypto_v2_manager_get_all_projects_response_v2), [], [], #{}}}.

-spec spec_delete_old_key_request_v2() -> {struct, thrift_decode:struct_config()}.
spec_delete_old_key_request_v2() ->
    Types = #{
        1 => {#crypto_v2_manager_delete_old_key_request_v2.project_name, binary},
        2 => {#crypto_v2_manager_delete_old_key_request_v2.key_id, int32}
    },
    {struct, {record, Types, crypto_v2_manager_delete_old_key_request_v2, record_info(size, crypto_v2_manager_delete_old_key_request_v2), [], [], #{}}}.

-spec spec_delete_old_key_response_v2() -> {struct, thrift_decode:struct_config()}.
spec_delete_old_key_response_v2() ->
    {struct, {record, #{}, crypto_v2_manager_delete_old_key_response_v2, record_info(size, crypto_v2_manager_delete_old_key_response_v2), [], [], #{}}}.

-spec tget_project_request_mode_integer_to_atom(integer()) -> tget_project_request_mode().
tget_project_request_mode_integer_to_atom(Code) -> thrift_decode:integer_to_atom(Code, spec_tget_project_request_mode()).


-spec record_info_(size,   RecordName :: atom()) -> undefined | pos_integer();
                  (fields, RecordName :: atom()) -> undefined | [atom()].
record_info_(fields, crypto_v2_manager_create_project_request_v2) -> record_info(fields, crypto_v2_manager_create_project_request_v2);
record_info_(fields, crypto_v2_manager_create_project_response_v2) -> record_info(fields, crypto_v2_manager_create_project_response_v2);
record_info_(fields, crypto_v2_manager_get_project_request_v2) -> record_info(fields, crypto_v2_manager_get_project_request_v2);
record_info_(fields, crypto_v2_manager_get_project_response_v2) -> record_info(fields, crypto_v2_manager_get_project_response_v2);
record_info_(fields, crypto_v2_manager_update_project_metadata_request_v2) -> record_info(fields, crypto_v2_manager_update_project_metadata_request_v2);
record_info_(fields, crypto_v2_manager_update_project_metadata_response_v2) -> record_info(fields, crypto_v2_manager_update_project_metadata_response_v2);
record_info_(fields, crypto_v2_manager_rewrap_keys_request_v2) -> record_info(fields, crypto_v2_manager_rewrap_keys_request_v2);
record_info_(fields, crypto_v2_manager_rewrap_keys_response_v2) -> record_info(fields, crypto_v2_manager_rewrap_keys_response_v2);
record_info_(fields, crypto_v2_manager_rotate_keys_request_v2) -> record_info(fields, crypto_v2_manager_rotate_keys_request_v2);
record_info_(fields, crypto_v2_manager_rotate_keys_response_v2) -> record_info(fields, crypto_v2_manager_rotate_keys_response_v2);
record_info_(fields, crypto_v2_manager_key_algorithm_options) -> record_info(fields, crypto_v2_manager_key_algorithm_options);
record_info_(fields, crypto_v2_manager_set_next_key_request_v2) -> record_info(fields, crypto_v2_manager_set_next_key_request_v2);
record_info_(fields, crypto_v2_manager_set_next_key_response_v2) -> record_info(fields, crypto_v2_manager_set_next_key_response_v2);
record_info_(fields, crypto_v2_manager_soft_delete_project_request_v2) -> record_info(fields, crypto_v2_manager_soft_delete_project_request_v2);
record_info_(fields, crypto_v2_manager_soft_delete_project_response_v2) -> record_info(fields, crypto_v2_manager_soft_delete_project_response_v2);
record_info_(fields, crypto_v2_manager_undelete_project_request_v2) -> record_info(fields, crypto_v2_manager_undelete_project_request_v2);
record_info_(fields, crypto_v2_manager_undelete_project_response_v2) -> record_info(fields, crypto_v2_manager_undelete_project_response_v2);
record_info_(fields, crypto_v2_manager_purge_project_request_v2) -> record_info(fields, crypto_v2_manager_purge_project_request_v2);
record_info_(fields, crypto_v2_manager_purge_project_response_v2) -> record_info(fields, crypto_v2_manager_purge_project_response_v2);
record_info_(fields, crypto_v2_manager_multi_get_projects_request_v2) -> record_info(fields, crypto_v2_manager_multi_get_projects_request_v2);
record_info_(fields, crypto_v2_manager_multi_get_projects_response_element_v2) -> record_info(fields, crypto_v2_manager_multi_get_projects_response_element_v2);
record_info_(fields, crypto_v2_manager_multi_get_projects_response_v2) -> record_info(fields, crypto_v2_manager_multi_get_projects_response_v2);
record_info_(fields, crypto_v2_manager_get_all_projects_response_v2) -> record_info(fields, crypto_v2_manager_get_all_projects_response_v2);
record_info_(fields, crypto_v2_manager_delete_old_key_request_v2) -> record_info(fields, crypto_v2_manager_delete_old_key_request_v2);
record_info_(fields, crypto_v2_manager_delete_old_key_response_v2) -> record_info(fields, crypto_v2_manager_delete_old_key_response_v2);
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_create_project_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_get_project_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_args) -> [];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_args) -> [request];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_create_project_v2_result) -> [success, excs, excsr, excc, expd];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_get_project_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_result) -> [success, excs, excsr, excc];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_result) -> [success, excs, excsr, excc];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields, crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_result) -> [success, excs, excsr, excc, expd, expnf];
record_info_(fields,  _) -> undefined;
record_info_(size, crypto_v2_manager_create_project_request_v2) -> record_info(size, crypto_v2_manager_create_project_request_v2);
record_info_(size, crypto_v2_manager_create_project_response_v2) -> record_info(size, crypto_v2_manager_create_project_response_v2);
record_info_(size, crypto_v2_manager_get_project_request_v2) -> record_info(size, crypto_v2_manager_get_project_request_v2);
record_info_(size, crypto_v2_manager_get_project_response_v2) -> record_info(size, crypto_v2_manager_get_project_response_v2);
record_info_(size, crypto_v2_manager_update_project_metadata_request_v2) -> record_info(size, crypto_v2_manager_update_project_metadata_request_v2);
record_info_(size, crypto_v2_manager_update_project_metadata_response_v2) -> record_info(size, crypto_v2_manager_update_project_metadata_response_v2);
record_info_(size, crypto_v2_manager_rewrap_keys_request_v2) -> record_info(size, crypto_v2_manager_rewrap_keys_request_v2);
record_info_(size, crypto_v2_manager_rewrap_keys_response_v2) -> record_info(size, crypto_v2_manager_rewrap_keys_response_v2);
record_info_(size, crypto_v2_manager_rotate_keys_request_v2) -> record_info(size, crypto_v2_manager_rotate_keys_request_v2);
record_info_(size, crypto_v2_manager_rotate_keys_response_v2) -> record_info(size, crypto_v2_manager_rotate_keys_response_v2);
record_info_(size, crypto_v2_manager_key_algorithm_options) -> record_info(size, crypto_v2_manager_key_algorithm_options);
record_info_(size, crypto_v2_manager_set_next_key_request_v2) -> record_info(size, crypto_v2_manager_set_next_key_request_v2);
record_info_(size, crypto_v2_manager_set_next_key_response_v2) -> record_info(size, crypto_v2_manager_set_next_key_response_v2);
record_info_(size, crypto_v2_manager_soft_delete_project_request_v2) -> record_info(size, crypto_v2_manager_soft_delete_project_request_v2);
record_info_(size, crypto_v2_manager_soft_delete_project_response_v2) -> record_info(size, crypto_v2_manager_soft_delete_project_response_v2);
record_info_(size, crypto_v2_manager_undelete_project_request_v2) -> record_info(size, crypto_v2_manager_undelete_project_request_v2);
record_info_(size, crypto_v2_manager_undelete_project_response_v2) -> record_info(size, crypto_v2_manager_undelete_project_response_v2);
record_info_(size, crypto_v2_manager_purge_project_request_v2) -> record_info(size, crypto_v2_manager_purge_project_request_v2);
record_info_(size, crypto_v2_manager_purge_project_response_v2) -> record_info(size, crypto_v2_manager_purge_project_response_v2);
record_info_(size, crypto_v2_manager_multi_get_projects_request_v2) -> record_info(size, crypto_v2_manager_multi_get_projects_request_v2);
record_info_(size, crypto_v2_manager_multi_get_projects_response_element_v2) -> record_info(size, crypto_v2_manager_multi_get_projects_response_element_v2);
record_info_(size, crypto_v2_manager_multi_get_projects_response_v2) -> record_info(size, crypto_v2_manager_multi_get_projects_response_v2);
record_info_(size, crypto_v2_manager_get_all_projects_response_v2) -> record_info(size, crypto_v2_manager_get_all_projects_response_v2);
record_info_(size, crypto_v2_manager_delete_old_key_request_v2) -> record_info(size, crypto_v2_manager_delete_old_key_request_v2);
record_info_(size, crypto_v2_manager_delete_old_key_response_v2) -> record_info(size, crypto_v2_manager_delete_old_key_response_v2);
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_create_project_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_get_project_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_args) -> 0;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_args) -> 1;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_create_project_v2_result) -> 5;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_get_project_v2_result) -> 6;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_result) -> 4;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_result) -> 4;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_result) -> 6;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_result) -> 6;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_result) -> 6;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_result) -> 6;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_result) -> 6;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_result) -> 6;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_result) -> 6;
record_info_(size, crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_result) -> 6;
record_info_(size,  _) -> undefined.


-spec inspect() -> [thrift_reflection:entity_tag()].
inspect() -> [
        create_project_request_v2,
        create_project_response_v2,
        tget_project_request_mode,
        get_project_request_v2,
        get_project_response_v2,
        update_project_metadata_request_v2,
        update_project_metadata_response_v2,
        rewrap_keys_request_v2,
        rewrap_keys_response_v2,
        rotate_keys_request_v2,
        rotate_keys_response_v2,
        key_algorithm_options,
        set_next_key_request_v2,
        set_next_key_response_v2,
        soft_delete_project_request_v2,
        soft_delete_project_response_v2,
        undelete_project_request_v2,
        undelete_project_response_v2,
        purge_project_request_v2,
        purge_project_response_v2,
        multi_get_projects_request_v2,
        get_project_response_or_error_v2,
        multi_get_projects_response_element_v2,
        multi_get_projects_response_v2,
        get_all_projects_response_v2,
        delete_old_key_request_v2,
        delete_old_key_response_v2,
        crypto_v2_manager_service_create_project_v2_args,
        crypto_v2_manager_service_get_project_v2_args,
        crypto_v2_manager_service_multi_get_projects_v2_args,
        crypto_v2_manager_service_get_all_projects_v2_args,
        crypto_v2_manager_service_update_project_metadata_v2_args,
        crypto_v2_manager_service_rewrap_keys_v2_args,
        crypto_v2_manager_service_rotate_keys_v2_args,
        crypto_v2_manager_service_set_next_key_v2_args,
        crypto_v2_manager_service_soft_delete_project_v2_args,
        crypto_v2_manager_service_undelete_project_v2_args,
        crypto_v2_manager_service_purge_project_v2_args,
        crypto_v2_manager_service_delete_old_key_v2_args,
        crypto_v2_manager_service_create_project_v2_result,
        crypto_v2_manager_service_get_project_v2_result,
        crypto_v2_manager_service_multi_get_projects_v2_result,
        crypto_v2_manager_service_get_all_projects_v2_result,
        crypto_v2_manager_service_update_project_metadata_v2_result,
        crypto_v2_manager_service_rewrap_keys_v2_result,
        crypto_v2_manager_service_rotate_keys_v2_result,
        crypto_v2_manager_service_set_next_key_v2_result,
        crypto_v2_manager_service_soft_delete_project_v2_result,
        crypto_v2_manager_service_undelete_project_v2_result,
        crypto_v2_manager_service_purge_project_v2_result,
        crypto_v2_manager_service_delete_old_key_v2_result,
        crypto_v2_manager_service
    ].


-spec inspect(thrift_reflection:entity_tag()) -> thrift_reflection:entity() | unknown_symbol.
inspect(create_project_request_v2) ->
    #struct_refl{
        name = "CreateProjectRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            },
            oncall => #field_refl{
                name = "oncall",
                type = string,
                field_id = 2,
                order = 2
            },
            maintainer_identities => #field_refl{
                name = "maintainerIdentities",
                type = {list, #symbol_ref{thrift_module = thrift_configerator_structs_infrasec_if_acl, symbol_name = identity}},
                field_id = 3,
                order = 3
            },
            project_metadata => #field_refl{
                name = "projectMetadata",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject_metadata},
                field_id = 4,
                order = 4
            },
            key_platform_type => #field_refl{
                name = "keyPlatformType",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tkey_platform_type},
                field_id = 5,
                order = 5
            },
            key_symmetry_type => #field_refl{
                name = "keySymmetryType",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tkey_symmetry_type},
                field_id = 6,
                order = 6
            },
            identities_for_actions => #field_refl{
                name = "identitiesForActions",
                type = {map, string, {list, #symbol_ref{thrift_module = thrift_configerator_structs_infrasec_if_acl, symbol_name = identity}}},
                field_id = 7,
                order = 7,
                requiredness = optional
            }
        },
        record_name = crypto_v2_manager_create_project_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_create_project_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(create_project_response_v2) ->
    #struct_refl{
        name = "CreateProjectResponseV2",
        fields = #{
            project_with_keys => #field_refl{
                name = "projectWithKeys",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject_with_keys},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_create_project_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_create_project_response_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(tget_project_request_mode) ->
    #enum_refl{
        name = "TGetProjectRequestMode",
        constants = #{
            unknown => #enum_const_refl{
                name = "UNKNOWN",
                code = 0
            },
            key_material_excluded => #enum_const_refl{
                name = "KEY_MATERIAL_EXCLUDED",
                code = 1
            },
            key_material_required => #enum_const_refl{
                name = "KEY_MATERIAL_REQUIRED",
                code = 2
            },
            key_material_optional => #enum_const_refl{
                name = "KEY_MATERIAL_OPTIONAL",
                code = 3
            }
        },
        annotations = [
            #simple_annotation{
                key = "cpp.enum_type",
                value = "std::uint8_t"
            }
        ]
    };
inspect(get_project_request_v2) ->
    #struct_refl{
        name = "GetProjectRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            },
            mode => #field_refl{
                name = "mode",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = tget_project_request_mode},
                field_id = 2,
                order = 2
            }
        },
        record_name = crypto_v2_manager_get_project_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_get_project_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(get_project_response_v2) ->
    #struct_refl{
        name = "GetProjectResponseV2",
        fields = #{
            project_with_keys => #field_refl{
                name = "projectWithKeys",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject_with_keys},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_get_project_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_get_project_response_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(update_project_metadata_request_v2) ->
    #struct_refl{
        name = "UpdateProjectMetadataRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            },
            project_metadata => #field_refl{
                name = "projectMetadata",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject_metadata},
                field_id = 2,
                order = 2
            },
            version_to_update => #field_refl{
                name = "versionToUpdate",
                type = i64,
                field_id = 3,
                order = 3
            }
        },
        record_name = crypto_v2_manager_update_project_metadata_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_update_project_metadata_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(update_project_metadata_response_v2) ->
    #struct_refl{
        name = "UpdateProjectMetadataResponseV2",
        fields = #{
            project => #field_refl{
                name = "project",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_update_project_metadata_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_update_project_metadata_response_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(rewrap_keys_request_v2) ->
    #struct_refl{
        name = "RewrapKeysRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            },
            wrapper_key_identifier => #field_refl{
                name = "wrapperKeyIdentifier",
                type = string,
                field_id = 2,
                order = 2
            },
            version_to_update => #field_refl{
                name = "versionToUpdate",
                type = i64,
                field_id = 3,
                order = 3
            }
        },
        record_name = crypto_v2_manager_rewrap_keys_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_rewrap_keys_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(rewrap_keys_response_v2) ->
    #struct_refl{
        name = "RewrapKeysResponseV2",
        fields = #{
            project => #field_refl{
                name = "project",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_rewrap_keys_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_rewrap_keys_response_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(rotate_keys_request_v2) ->
    #struct_refl{
        name = "RotateKeysRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            },
            version_to_update => #field_refl{
                name = "versionToUpdate",
                type = i64,
                field_id = 2,
                order = 2,
                requiredness = optional
            }
        },
        record_name = crypto_v2_manager_rotate_keys_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_rotate_keys_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(rotate_keys_response_v2) ->
    #struct_refl{
        name = "RotateKeysResponseV2",
        fields = #{
            project => #field_refl{
                name = "project",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_rotate_keys_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_rotate_keys_response_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(key_algorithm_options) ->
    #struct_refl{
        name = "KeyAlgorithmOptions",
        fields = #{
            authentication_algorithm_options => #field_refl{
                name = "authenticationAlgorithmOptions",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tauthentication_algorithm_options},
                field_id = 1,
                order = 1
            },
            encryption_algorithm_options => #field_refl{
                name = "encryptionAlgorithmOptions",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tencryption_algorithm_options},
                field_id = 2,
                order = 2
            }
        },
        record_name = crypto_v2_manager_key_algorithm_options,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_key_algorithm_options},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(set_next_key_request_v2) ->
    #struct_refl{
        name = "SetNextKeyRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            },
            options => #field_refl{
                name = "options",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = key_algorithm_options},
                field_id = 2,
                order = 2
            },
            version_to_update => #field_refl{
                name = "versionToUpdate",
                type = i64,
                field_id = 3,
                order = 3
            }
        },
        record_name = crypto_v2_manager_set_next_key_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_set_next_key_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(set_next_key_response_v2) ->
    #struct_refl{
        name = "SetNextKeyResponseV2",
        fields = #{
            project => #field_refl{
                name = "project",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_set_next_key_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_set_next_key_response_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(soft_delete_project_request_v2) ->
    #struct_refl{
        name = "SoftDeleteProjectRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_soft_delete_project_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_soft_delete_project_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(soft_delete_project_response_v2) ->
    #struct_refl{
        name = "SoftDeleteProjectResponseV2",
        fields = #{},
        record_name = crypto_v2_manager_soft_delete_project_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_soft_delete_project_response_v2}
    };
inspect(undelete_project_request_v2) ->
    #struct_refl{
        name = "UndeleteProjectRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_undelete_project_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_undelete_project_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(undelete_project_response_v2) ->
    #struct_refl{
        name = "UndeleteProjectResponseV2",
        fields = #{},
        record_name = crypto_v2_manager_undelete_project_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_undelete_project_response_v2}
    };
inspect(purge_project_request_v2) ->
    #struct_refl{
        name = "PurgeProjectRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_purge_project_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_purge_project_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(purge_project_response_v2) ->
    #struct_refl{
        name = "PurgeProjectResponseV2",
        fields = #{},
        record_name = crypto_v2_manager_purge_project_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_purge_project_response_v2}
    };
inspect(multi_get_projects_request_v2) ->
    #struct_refl{
        name = "MultiGetProjectsRequestV2",
        fields = #{
            project_requests => #field_refl{
                name = "projectRequests",
                type = {list, #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = get_project_request_v2}},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_multi_get_projects_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_multi_get_projects_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(get_project_response_or_error_v2) ->
    #union_refl{
        name = "GetProjectResponseOrErrorV2",
        fields = #{
            project_response => #field_refl{
                name = "projectResponse",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = get_project_response_v2},
                field_id = 1,
                order = 1
            },
            service_exception => #field_refl{
                name = "serviceException",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 2,
                order = 2
            },
            retryable_service_exception => #field_refl{
                name = "retryableServiceException",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 3,
                order = 3
            },
            client_exception => #field_refl{
                name = "clientException",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 4,
                order = 4
            },
            permission_denied_exception => #field_refl{
                name = "permissionDeniedException",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 5,
                order = 5
            },
            project_not_found_exception => #field_refl{
                name = "projectNotFoundException",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 6,
                order = 6
            }
        },
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(multi_get_projects_response_element_v2) ->
    #struct_refl{
        name = "MultiGetProjectsResponseElementV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            },
            mode => #field_refl{
                name = "mode",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = tget_project_request_mode},
                field_id = 2,
                order = 2
            },
            project_response_or_error => #field_refl{
                name = "projectResponseOrError",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = get_project_response_or_error_v2},
                field_id = 3,
                order = 3
            }
        },
        record_name = crypto_v2_manager_multi_get_projects_response_element_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_multi_get_projects_response_element_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(multi_get_projects_response_v2) ->
    #struct_refl{
        name = "MultiGetProjectsResponseV2",
        fields = #{
            results => #field_refl{
                name = "results",
                type = {list, #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = multi_get_projects_response_element_v2}},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_multi_get_projects_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_multi_get_projects_response_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(get_all_projects_response_v2) ->
    #struct_refl{
        name = "GetAllProjectsResponseV2",
        fields = #{
            projects => #field_refl{
                name = "projects",
                type = {list, #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2, symbol_name = tproject_with_keys}},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_get_all_projects_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_get_all_projects_response_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(delete_old_key_request_v2) ->
    #struct_refl{
        name = "DeleteOldKeyRequestV2",
        fields = #{
            project_name => #field_refl{
                name = "projectName",
                type = string,
                field_id = 1,
                order = 1
            },
            key_id => #field_refl{
                name = "keyID",
                type = i32,
                field_id = 2,
                order = 2
            }
        },
        record_name = crypto_v2_manager_delete_old_key_request_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_delete_old_key_request_v2},
        annotations = [
            #simple_annotation{
                key = "cpp.minimize_padding",
                value = "1"
            }
        ]
    };
inspect(delete_old_key_response_v2) ->
    #struct_refl{
        name = "DeleteOldKeyResponseV2",
        fields = #{},
        record_name = crypto_v2_manager_delete_old_key_response_v2,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_delete_old_key_response_v2}
    };
inspect(crypto_v2_manager_service_create_project_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = create_project_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_create_project_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_create_project_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_get_project_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = get_project_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_get_project_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_get_project_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_multi_get_projects_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = multi_get_projects_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_get_all_projects_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{},
        record_name = crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_update_project_metadata_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = update_project_metadata_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_rewrap_keys_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = rewrap_keys_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_rotate_keys_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = rotate_keys_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_set_next_key_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = set_next_key_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_soft_delete_project_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = soft_delete_project_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_undelete_project_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = undelete_project_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_purge_project_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = purge_project_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_delete_old_key_v2_args) ->
    #struct_refl{
        name = undefined,
        fields = #{
            request => #field_refl{
                name = "request",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = delete_old_key_request_v2},
                field_id = 1,
                order = 1
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_args,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_args},
        representation = map
    };
inspect(crypto_v2_manager_service_create_project_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = create_project_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_create_project_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_create_project_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_get_project_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = get_project_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_get_project_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_get_project_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_multi_get_projects_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = multi_get_projects_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_multi_get_projects_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_get_all_projects_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = get_all_projects_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_get_all_projects_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_update_project_metadata_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = update_project_metadata_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_update_project_metadata_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_rewrap_keys_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = rewrap_keys_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_rewrap_keys_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_rotate_keys_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = rotate_keys_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_rotate_keys_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_set_next_key_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = set_next_key_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_set_next_key_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_soft_delete_project_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = soft_delete_project_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_soft_delete_project_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_undelete_project_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = undelete_project_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_undelete_project_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_purge_project_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = purge_project_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_purge_project_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service_delete_old_key_v2_result) ->
    #struct_refl{
        name = undefined,
        fields = #{
            success => #field_refl{
                name = "success",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = delete_old_key_response_v2},
                field_id = 0,
                order = 1
            },
            excs => #field_refl{
                name = "excs",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                field_id = 1,
                order = 2
            },
            excsr => #field_refl{
                name = "excsr",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                field_id = 2,
                order = 3
            },
            excc => #field_refl{
                name = "excc",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                field_id = 3,
                order = 4
            },
            expd => #field_refl{
                name = "expd",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                field_id = 4,
                order = 5
            },
            expnf => #field_refl{
                name = "expnf",
                type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                field_id = 5,
                order = 6
            }
        },
        record_name = crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_result,
        default_constructor = {thrift_crypto_v2_if_crypto_v2_manager, default_crypto_v2_manager_crypto_v2_manager_service_delete_old_key_v2_result},
        representation = map
    };
inspect(crypto_v2_manager_service) ->
    #service_refl{
        name = "CryptoV2ManagerService",
        module = thrift_crypto_v2_if_crypto_v2_manager,
        extends = undefined,
        methods = [
            #method_refl{
                name = "createProjectV2",
                erlang_name = "create_project_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_create_project_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_create_project_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = create_project_response_v2}
            },
            #method_refl{
                name = "getProjectV2",
                erlang_name = "get_project_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_get_project_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_get_project_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = get_project_response_v2}
            },
            #method_refl{
                name = "multiGetProjectsV2",
                erlang_name = "multi_get_projects_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_multi_get_projects_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_multi_get_projects_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = multi_get_projects_response_v2}
            },
            #method_refl{
                name = "getAllProjectsV2",
                erlang_name = "get_all_projects_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_get_all_projects_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_get_all_projects_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = get_all_projects_response_v2}
            },
            #method_refl{
                name = "updateProjectMetadataV2",
                erlang_name = "update_project_metadata_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_update_project_metadata_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_update_project_metadata_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = update_project_metadata_response_v2}
            },
            #method_refl{
                name = "rewrapKeysV2",
                erlang_name = "rewrap_keys_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_rewrap_keys_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_rewrap_keys_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = rewrap_keys_response_v2}
            },
            #method_refl{
                name = "rotateKeysV2",
                erlang_name = "rotate_keys_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_rotate_keys_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_rotate_keys_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = rotate_keys_response_v2}
            },
            #method_refl{
                name = "setNextKeyV2",
                erlang_name = "set_next_key_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_set_next_key_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_set_next_key_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = set_next_key_response_v2}
            },
            #method_refl{
                name = "softDeleteProjectV2",
                erlang_name = "soft_delete_project_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_soft_delete_project_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_soft_delete_project_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = soft_delete_project_response_v2}
            },
            #method_refl{
                name = "undeleteProjectV2",
                erlang_name = "undelete_project_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_undelete_project_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_undelete_project_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = undelete_project_response_v2}
            },
            #method_refl{
                name = "purgeProjectV2",
                erlang_name = "purge_project_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_purge_project_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_purge_project_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = purge_project_response_v2}
            },
            #method_refl{
                name = "deleteOldKeyV2",
                erlang_name = "delete_old_key_v2",
                exception_fields = #{
                    excs => #field_refl{
                        name = "excs",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_exception},
                        field_id = 1,
                        order = 1
                    },
                    excsr => #field_refl{
                        name = "excsr",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_service_retryable_exception},
                        field_id = 2,
                        order = 2
                    },
                    excc => #field_refl{
                        name = "excc",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_client_exception},
                        field_id = 3,
                        order = 3
                    },
                    expd => #field_refl{
                        name = "expd",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_permission_denied_exception},
                        field_id = 4,
                        order = 4
                    },
                    expnf => #field_refl{
                        name = "expnf",
                        type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_common, symbol_name = tcrypto_v2_project_not_found_exception},
                        field_id = 5,
                        order = 5
                    }
                },
                args_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_delete_old_key_v2_args },
                result_struct = #symbol_ref{ thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = crypto_v2_manager_service_delete_old_key_v2_result },
                return_type = #symbol_ref{thrift_module = thrift_crypto_v2_if_crypto_v2_manager, symbol_name = delete_old_key_response_v2}
            }
        ]
    };
inspect(_) ->
    unknown_symbol.